/* This file is generated by rescript-bedrock */
/* Module @minecraft/server v1.8.0-beta for Minecraft 1.20.50-beta.3 */
/* Enum definition */
type block_component_types = | @as("minecraft:inventory") Inventory | @as("minecraft:lavaContainer") LavaContainer | @as("minecraft:piston") Piston | @as("minecraft:potionContainer") PotionContainer | @as("minecraft:recordPlayer") RecordPlayer | @as("minecraft:sign") Sign | @as("minecraft:snowContainer") SnowContainer | @as("minecraft:waterContainer") WaterContainer
type block_volume_intersection = | @as(1) Contains | @as(0) Disjoint | @as(2) Intersects
type compound_block_volume_action = | @as(0) Add | @as(1) Subtract
type compound_block_volume_position_relativity = | @as(1) Absolute | @as(0) Relative
type difficulty = | @as(1) Easy | @as(3) Hard | @as(2) Normal | @as(0) Peaceful
type direction = | @as("Down") Down | @as("East") East | @as("North") North | @as("South") South | @as("Up") Up | @as("West") West
type display_slot_id = | @as("BelowName") BelowName | @as("List") List | @as("Sidebar") Sidebar
type dye_color = | @as("Black") Black | @as("Blue") Blue | @as("Brown") Brown | @as("Cyan") Cyan | @as("Gray") Gray | @as("Green") Green | @as("LightBlue") LightBlue | @as("Lime") Lime | @as("Magenta") Magenta | @as("Orange") Orange | @as("Pink") Pink | @as("Purple") Purple | @as("Red") Red | @as("Silver") Silver | @as("White") White | @as("Yellow") Yellow
type easing_type = | @as("InBack") InBack | @as("InBounce") InBounce | @as("InCirc") InCirc | @as("InCubic") InCubic | @as("InElastic") InElastic | @as("InExpo") InExpo | @as("InOutBack") InOutBack | @as("InOutBounce") InOutBounce | @as("InOutCirc") InOutCirc | @as("InOutCubic") InOutCubic | @as("InOutElastic") InOutElastic | @as("InOutExpo") InOutExpo | @as("InOutQuad") InOutQuad | @as("InOutQuart") InOutQuart | @as("InOutQuint") InOutQuint | @as("InOutSine") InOutSine | @as("InQuad") InQuad | @as("InQuart") InQuart | @as("InQuint") InQuint | @as("InSine") InSine | @as("Linear") Linear | @as("OutBack") OutBack | @as("OutBounce") OutBounce | @as("OutCirc") OutCirc | @as("OutCubic") OutCubic | @as("OutElastic") OutElastic | @as("OutExpo") OutExpo | @as("OutQuad") OutQuad | @as("OutQuart") OutQuart | @as("OutQuint") OutQuint | @as("OutSine") OutSine | @as("Spring") Spring
type entity_component_types = | @as("minecraft:addrider") AddRider | @as("minecraft:ageable") Ageable | @as("minecraft:breathable") Breathable | @as("minecraft:can_climb") CanClimb | @as("minecraft:can_fly") CanFly | @as("minecraft:can_power_jump") CanPowerJump | @as("minecraft:color") Color | @as("minecraft:equippable") Equippable | @as("minecraft:fire_immune") FireImmune | @as("minecraft:floats_in_liquid") FloatsInLiquid | @as("minecraft:flying_speed") FlyingSpeed | @as("minecraft:friction_modifier") FrictionModifier | @as("minecraft:ground_offset") GroundOffset | @as("minecraft:healable") Healable | @as("minecraft:health") Health | @as("minecraft:inventory") Inventory | @as("minecraft:is_baby") IsBaby | @as("minecraft:is_charged") IsCharged | @as("minecraft:is_chested") IsChested | @as("minecraft:is_dyeable") IsDyeable | @as("minecraft:is_hidden_when_invisible") IsHiddenWhenInvisible | @as("minecraft:is_ignited") IsIgnited | @as("minecraft:is_illager_captain") IsIllagerCaptain | @as("minecraft:is_saddled") IsSaddled | @as("minecraft:is_shaking") IsShaking | @as("minecraft:is_sheared") IsSheared | @as("minecraft:is_stackable") IsStackable | @as("minecraft:is_stunned") IsStunned | @as("minecraft:is_tamed") IsTamed | @as("minecraft:item") Item | @as("minecraft:lava_movement") LavaMovement | @as("minecraft:leashable") Leashable | @as("minecraft:mark_variant") MarkVariant | @as("minecraft:tamemount") MountTaming | @as("minecraft:movement") Movement | @as("minecraft:movement.amphibious") MovementAmphibious | @as("minecraft:movement.basic") MovementBasic | @as("minecraft:movement.fly") MovementFly | @as("minecraft:movement.generic") MovementGeneric | @as("minecraft:movement.glide") MovementGlide | @as("minecraft:movement.hover") MovementHover | @as("minecraft:movement.jump") MovementJump | @as("minecraft:movement.skip") MovementSkip | @as("minecraft:movement.sway") MovementSway | @as("minecraft:navigation.climb") NavigationClimb | @as("minecraft:navigation.float") NavigationFloat | @as("minecraft:navigation.fly") NavigationFly | @as("minecraft:navigation.generic") NavigationGeneric | @as("minecraft:navigation.hover") NavigationHover | @as("minecraft:navigation.walk") NavigationWalk | @as("minecraft:npc") Npc | @as("minecraft:onfire") OnFire | @as("minecraft:push_through") PushThrough | @as("minecraft:rideable") Rideable | @as("minecraft:riding") Riding | @as("minecraft:scale") Scale | @as("minecraft:skin_id") SkinId | @as("minecraft:strength") Strength | @as("minecraft:tameable") Tameable | @as("minecraft:underwater_movement") UnderwaterMovement | @as("minecraft:variant") Variant | @as("minecraft:wants_jockey") WantsJockey
type entity_damage_cause = | @as("anvil") Anvil | @as("blockExplosion") BlockExplosion | @as("campfire") Campfire | @as("charging") Charging | @as("contact") Contact | @as("drowning") Drowning | @as("entityAttack") EntityAttack | @as("entityExplosion") EntityExplosion | @as("fall") Fall | @as("fallingBlock") FallingBlock | @as("fire") Fire | @as("fireTick") FireTick | @as("fireworks") Fireworks | @as("flyIntoWall") FlyIntoWall | @as("freezing") Freezing | @as("lava") Lava | @as("lightning") Lightning | @as("magic") Magic | @as("magma") Magma | @as("none") None | @as("override") Override | @as("piston") Piston | @as("projectile") Projectile | @as("ramAttack") RamAttack | @as("sonicBoom") SonicBoom | @as("soulCampfire") SoulCampfire | @as("stalactite") Stalactite | @as("stalagmite") Stalagmite | @as("starve") Starve | @as("suffocation") Suffocation | @as("suicide") Suicide | @as("temperature") Temperature | @as("thorns") Thorns | @as("void") Void | @as("wither") Wither
type entity_initialization_cause = | @as("Born") Born | @as("Event") Event | @as("Loaded") Loaded | @as("Spawned") Spawned | @as("Transformed") Transformed
type entity_lifetime_state = | @as("Loaded") Loaded | @as("Unloaded") Unloaded
type equipment_slot = | @as("Chest") Chest | @as("Feet") Feet | @as("Head") Head | @as("Legs") Legs | @as("Mainhand") Mainhand | @as("Offhand") Offhand
type fluid_type = | @as("Lava") Lava | @as("Potion") Potion | @as("PowderSnow") PowderSnow | @as("Water") Water
type game_mode = | @as("adventure") Adventure | @as("creative") Creative | @as("spectator") Spectator | @as("survival") Survival
type item_component_types = | @as("minecraft:cooldown") Cooldown | @as("minecraft:durability") Durability | @as("minecraft:enchantments") Enchants | @as("minecraft:food") Food
type item_lock_mode = | @as("inventory") Inventory | @as("none") None | @as("slot") Slot
type moon_phase = | @as(2) FirstQuarter | @as(0) FullMoon | @as(6) LastQuarter | @as(4) NewMoon | @as(3) WaningCrescent | @as(1) WaningGibbous | @as(5) WaxingCrescent | @as(7) WaxingGibbous
type objective_sort_order = | @as(0) Ascending | @as(1) Descending
type scoreboard_identity_type = | @as("Entity") Entity | @as("FakePlayer") FakePlayer | @as("Player") Player
type script_event_source = | @as("Block") Block | @as("Entity") Entity | @as("NPCDialogue") NPCDialogue | @as("Server") Server
type sign_side = | @as("Back") Back | @as("Front") Front
type time_of_day = | @as(1000) Day | @as(18000) Midnight | @as(13000) Night | @as(6000) Noon | @as(23000) Sunrise | @as(12000) Sunset
type watchdog_terminate_reason = | @as("Hang") Hang | @as("StackOverflow") StackOverflow
type weather_type = | @as("Clear") Clear | @as("Rain") Rain | @as("Thunder") Thunder
/* Error definition */
exception CommandError
exception LocationInUnloadedChunkError
exception LocationOutOfWorldBoundariesError
/* Class introduction */
type _Block 
type _BlockAreaSize 
type _BlockComponent 
type _BlockEvent 
type _BlockExplodeAfterEvent 
type _BlockExplodeAfterEventSignal 
type _BlockInventoryComponent 
type _BlockLavaContainerComponent 
type _BlockLiquidContainerComponent 
type _BlockLocationIterator 
type _BlockPermutation 
type _BlockPistonComponent 
type _BlockPotionContainerComponent 
type _BlockRecordPlayerComponent 
type _BlockSignComponent 
type _BlockSnowContainerComponent 
type _BlockStates 
type _BlockStateType 
type _BlockType 
type _BlockTypes 
type _BlockVolumeUtils 
type _BlockWaterContainerComponent 
type _BoundingBoxUtils 
type _ButtonPushAfterEvent 
type _ButtonPushAfterEventSignal 
type _Camera 
type _ChatSendAfterEvent 
type _ChatSendAfterEventSignal 
type _ChatSendBeforeEvent 
type _ChatSendBeforeEventSignal 
type _CommandResult 
type _Component 
type _CompoundBlockVolume 
type _Container 
type _ContainerSlot 
type _DataDrivenEntityTriggerAfterEvent 
type _DataDrivenEntityTriggerAfterEventSignal 
type _DataDrivenEntityTriggerBeforeEvent 
type _DataDrivenEntityTriggerBeforeEventSignal 
type _Dimension 
type _DimensionType 
type _DimensionTypes 
type _Effect 
type _EffectAddAfterEvent 
type _EffectAddAfterEventSignal 
type _EffectAddBeforeEvent 
type _EffectAddBeforeEventSignal 
type _EffectType 
type _EffectTypes 
type _Enchantment 
type _EnchantmentList 
type _EnchantmentSlot 
type _EnchantmentType 
type _EnchantmentTypes 
type _Entity 
type _EntityAddRiderComponent 
type _EntityAgeableComponent 
type _EntityAttributeComponent 
type _EntityBaseMovementComponent 
type _EntityBreathableComponent 
type _EntityCanClimbComponent 
type _EntityCanFlyComponent 
type _EntityCanPowerJumpComponent 
type _EntityColorComponent 
type _EntityComponent 
type _EntityDefinitionFeedItem 
type _EntityDieAfterEvent 
type _EntityDieAfterEventSignal 
type _EntityEquippableComponent 
type _EntityFireImmuneComponent 
type _EntityFloatsInLiquidComponent 
type _EntityFlyingSpeedComponent 
type _EntityFrictionModifierComponent 
type _EntityGroundOffsetComponent 
type _EntityHealableComponent 
type _EntityHealthChangedAfterEvent 
type _EntityHealthChangedAfterEventSignal 
type _EntityHealthComponent 
type _EntityHitBlockAfterEvent 
type _EntityHitBlockAfterEventSignal 
type _EntityHitEntityAfterEvent 
type _EntityHitEntityAfterEventSignal 
type _EntityHurtAfterEvent 
type _EntityHurtAfterEventSignal 
type _EntityInventoryComponent 
type _EntityIsBabyComponent 
type _EntityIsChargedComponent 
type _EntityIsChestedComponent 
type _EntityIsDyeableComponent 
type _EntityIsHiddenWhenInvisibleComponent 
type _EntityIsIgnitedComponent 
type _EntityIsIllagerCaptainComponent 
type _EntityIsSaddledComponent 
type _EntityIsShakingComponent 
type _EntityIsShearedComponent 
type _EntityIsStackableComponent 
type _EntityIsStunnedComponent 
type _EntityIsTamedComponent 
type _EntityItemComponent 
type _EntityIterator 
type _EntityLavaMovementComponent 
type _EntityLeashableComponent 
type _EntityLoadAfterEvent 
type _EntityLoadAfterEventSignal 
type _EntityMarkVariantComponent 
type _EntityMountTamingComponent 
type _EntityMovementAmphibiousComponent 
type _EntityMovementBasicComponent 
type _EntityMovementComponent 
type _EntityMovementFlyComponent 
type _EntityMovementGenericComponent 
type _EntityMovementGlideComponent 
type _EntityMovementHoverComponent 
type _EntityMovementJumpComponent 
type _EntityMovementSkipComponent 
type _EntityMovementSwayComponent 
type _EntityNavigationClimbComponent 
type _EntityNavigationComponent 
type _EntityNavigationFloatComponent 
type _EntityNavigationFlyComponent 
type _EntityNavigationGenericComponent 
type _EntityNavigationHoverComponent 
type _EntityNavigationWalkComponent 
type _EntityNpcComponent 
type _EntityOnFireComponent 
type _EntityPushThroughComponent 
type _EntityRemoveAfterEvent 
type _EntityRemoveAfterEventSignal 
type _EntityRemoveBeforeEvent 
type _EntityRemoveBeforeEventSignal 
type _EntityRideableComponent 
type _EntityRidingComponent 
type _EntityScaleComponent 
type _EntitySkinIdComponent 
type _EntitySpawnAfterEvent 
type _EntitySpawnAfterEventSignal 
type _EntityStrengthComponent 
type _EntityTameableComponent 
type _EntityType 
type _EntityTypeIterator 
type _EntityTypes 
type _EntityUnderwaterMovementComponent 
type _EntityVariantComponent 
type _EntityWantsJockeyComponent 
type _ExplosionAfterEvent 
type _ExplosionAfterEventSignal 
type _ExplosionBeforeEvent 
type _ExplosionBeforeEventSignal 
type _FeedItem 
type _FeedItemEffect 
type _FilterGroup 
type _FluidContainer 
type _IButtonPushAfterEventSignal 
type _ILeverActionAfterEventSignal 
type _IPlayerJoinAfterEventSignal 
type _IPlayerLeaveAfterEventSignal 
type _IPlayerSpawnAfterEventSignal 
type _ItemCompleteUseAfterEvent 
type _ItemCompleteUseAfterEventSignal 
type _ItemComponent 
type _ItemCooldownComponent 
type _ItemDefinitionAfterEventSignal 
type _ItemDefinitionBeforeEventSignal 
type _ItemDefinitionTriggeredAfterEvent 
type _ItemDefinitionTriggeredBeforeEvent 
type _ItemDurabilityComponent 
type _ItemEnchantsComponent 
type _ItemFoodComponent 
type _ItemReleaseUseAfterEvent 
type _ItemReleaseUseAfterEventSignal 
type _ItemStack 
type _ItemStartUseAfterEvent 
type _ItemStartUseAfterEventSignal 
type _ItemStartUseOnAfterEvent 
type _ItemStartUseOnAfterEventSignal 
type _ItemStopUseAfterEvent 
type _ItemStopUseAfterEventSignal 
type _ItemStopUseOnAfterEvent 
type _ItemStopUseOnAfterEventSignal 
type _ItemType 
type _ItemTypes 
type _ItemUseAfterEvent 
type _ItemUseAfterEventSignal 
type _ItemUseBeforeEvent 
type _ItemUseBeforeEventSignal 
type _ItemUseOnAfterEvent 
type _ItemUseOnAfterEventSignal 
type _ItemUseOnBeforeEvent 
type _ItemUseOnBeforeEventSignal 
type _LeverActionAfterEvent 
type _LeverActionAfterEventSignal 
type _MessageReceiveAfterEvent 
type _MinecraftDimensionTypes 
type _MolangVariableMap 
type _NavigationResult 
type _PistonActivateAfterEvent 
type _PistonActivateAfterEventSignal 
type _PistonActivateBeforeEvent 
type _PistonActivateBeforeEventSignal 
type _Player 
type _PlayerBreakBlockAfterEvent 
type _PlayerBreakBlockAfterEventSignal 
type _PlayerBreakBlockBeforeEvent 
type _PlayerBreakBlockBeforeEventSignal 
type _PlayerDimensionChangeAfterEvent 
type _PlayerDimensionChangeAfterEventSignal 
type _PlayerInteractWithBlockAfterEvent 
type _PlayerInteractWithBlockAfterEventSignal 
type _PlayerInteractWithBlockBeforeEvent 
type _PlayerInteractWithBlockBeforeEventSignal 
type _PlayerInteractWithEntityAfterEvent 
type _PlayerInteractWithEntityAfterEventSignal 
type _PlayerInteractWithEntityBeforeEvent 
type _PlayerInteractWithEntityBeforeEventSignal 
type _PlayerIterator 
type _PlayerJoinAfterEvent 
type _PlayerJoinAfterEventSignal 
type _PlayerLeaveAfterEvent 
type _PlayerLeaveAfterEventSignal 
type _PlayerLeaveBeforeEvent 
type _PlayerLeaveBeforeEventSignal 
type _PlayerPlaceBlockAfterEvent 
type _PlayerPlaceBlockAfterEventSignal 
type _PlayerPlaceBlockBeforeEvent 
type _PlayerPlaceBlockBeforeEventSignal 
type _PlayerSpawnAfterEvent 
type _PlayerSpawnAfterEventSignal 
type _PressurePlatePopAfterEvent 
type _PressurePlatePopAfterEventSignal 
type _PressurePlatePushAfterEvent 
type _PressurePlatePushAfterEventSignal 
type _ProjectileHitBlockAfterEvent 
type _ProjectileHitBlockAfterEventSignal 
type _ProjectileHitEntityAfterEvent 
type _ProjectileHitEntityAfterEventSignal 
type _Scoreboard 
type _ScoreboardIdentity 
type _ScoreboardObjective 
type _ScoreboardScoreInfo 
type _ScreenDisplay 
type _ScriptEventCommandMessageAfterEvent 
type _ScriptEventCommandMessageAfterEventSignal 
type _Seat 
type _ServerMessageAfterEventSignal 
type _System 
type _SystemAfterEvents 
type _SystemBeforeEvents 
type _TargetBlockHitAfterEvent 
type _TargetBlockHitAfterEventSignal 
type _Trigger 
type _TripWireTripAfterEvent 
type _TripWireTripAfterEventSignal 
type _Vector 
type _WatchdogTerminateBeforeEvent 
type _WatchdogTerminateBeforeEventSignal 
type _WeatherChangeAfterEvent 
type _WeatherChangeAfterEventSignal 
type _World 
type _WorldAfterEvents 
type _WorldBeforeEvents 
type _WorldInitializeAfterEvent 
type _WorldInitializeAfterEventSignal 
/* Interface definition */
type scoreboard_objective_display_options = {objective: _ScoreboardObjective, sort_order: option<objective_sort_order>}
type raw_message_score = {name: option<string>, objective: option<string>}
type rec raw_message = {rawtext: option<array<raw_message>>, score: option<raw_message_score>, text: option<string>, translate: option<string>, @as("with") with_: option<@unwrap[ | #Array(array<string>) | #RawMessage(raw_message) ]>}
type raw_text = {rawtext: option<array<raw_message>>}
type entity_query_score_options = {exclude: option<bool>, max_score: option<int32>, min_score: option<int32>, objective: option<string>}
type dimension_location = {dimension: _Dimension, x: float, y: float, z: float}
type definition_modifier = {added_component_groups: array<string>, removed_component_groups: array<string>, triggers: array<_Trigger>}
type vector2 = {x: float, y: float}
type explosion_options = {allow_underwater: option<bool>, breaks_blocks: option<bool>, causes_fire: option<bool>, source: option<_Entity>}
type entity_raycast_hit = {distance: float, entity: _Entity}
type entity_hit_information = {entity: option<_Entity>}
type entity_event_options = {entities: option<array<_Entity>>, entity_types: option<array<string>>}
type entity_data_driven_trigger_event_options = {entities: option<array<_Entity>>, entity_types: option<array<string>>, event_types: option<array<string>>}
type entity_damage_source = {cause: entity_damage_cause, damaging_entity: option<_Entity>, damaging_projectile: option<_Entity>}
type entity_apply_damage_options = {cause: entity_damage_cause, damaging_entity: option<_Entity>}
type entity_apply_damage_by_projectile_options = {damaging_entity: option<_Entity>, damaging_projectile: _Entity}
type camera_fade_time_options = {fade_in_time: float, fade_out_time: float, hold_time: float}
type rgb = {blue: float, green: float, red: float}
type camera_fade_options = {fade_color: option<rgb>, fade_time: option<camera_fade_time_options>}
type camera_ease_options = {ease_time: option<float>, ease_type: option<easing_type>}
type camera_default_options = {ease_options: camera_ease_options}
type vector3 = {x: float, y: float, z: float}
type teleport_options = {check_for_blocks: option<bool>, dimension: option<_Dimension>, facing_location: option<vector3>, keep_velocity: option<bool>, rotation: option<vector2>}
type player_sound_options = {location: option<vector3>, pitch: option<float>, volume: option<float>}
type entity_query_options = {closest: option<int32>, exclude_families: option<array<string>>, exclude_game_modes: option<array<game_mode>>, exclude_names: option<array<string>>, exclude_tags: option<array<string>>, exclude_types: option<array<string>>, families: option<array<string>>, farthest: option<int32>, game_mode: option<game_mode>, location: option<vector3>, max_distance: option<float>, max_horizontal_rotation: option<float>, max_level: option<int32>, max_vertical_rotation: option<float>, min_distance: option<float>, min_horizontal_rotation: option<float>, min_level: option<int32>, min_vertical_rotation: option<float>, name: option<string>, score_options: option<array<entity_query_score_options>>, tags: option<array<string>>, @as("type") type_: option<string>, volume: option<_BlockAreaSize>}
type camera_set_rot_options = {ease_options: option<camera_ease_options>, location: option<vector3>, rotation: vector2}
type camera_set_pos_options = {ease_options: option<camera_ease_options>, facing_location: vector3, location: option<vector3>}
type camera_set_location_options = {ease_options: option<camera_ease_options>, location: vector3}
type camera_set_facing_options = {ease_options: option<camera_ease_options>, facing_entity: _Entity, location: option<vector3>}
type bounding_box = {max: vector3, min: vector3}
type block_volume = {from: vector3, to: vector3}
type compound_block_volume_item = {action: option<compound_block_volume_action>, location_relativity: option<compound_block_volume_position_relativity>, volume: block_volume}
type block_raycast_hit = {block: _Block, face: direction, face_location: vector3}
type block_hit_information = {block: _Block, face: direction, face_location: vector3}
type block_fill_options = {matching_block: option<_BlockPermutation>}
type block_event_options = {block_types: option<array<string>>, permutations: option<array<_BlockPermutation>>}
type block_raycast_options = {include_liquid_blocks: option<bool>, include_passable_blocks: option<bool>, max_distance: option<int32>}
type entity_effect_options = {amplifier: option<int32>, show_particles: option<bool>}
type entity_raycast_options = {max_distance: option<int32>}
type music_options = {fade: option<float>, loop: option<bool>, volume: option<float>}
type play_animation_options = {blend_out_time: option<float>, controller: option<string>, next_state: option<string>, stop_expression: option<string>}
type rgba = {alpha: float, blue: float, green: float, red: float}
type script_event_message_filter_options = {namespaces: array<string>}
type title_display_options = {fade_in_duration: int32, fade_out_duration: int32, stay_duration: int32, subtitle: option<@unwrap[ | #Array(array<@unwrap[ | #RawMessage(raw_message) | #String(string) ]>) | #RawMessage(raw_message) | #String(string) ]>}
type world_sound_options = {pitch: option<float>, volume: option<float>}
/* Class definition */
module IPlayerSpawnAfterEventSignal = {
  type t = _IPlayerSpawnAfterEventSignal
  module Impl = ( T: { type t } ) => {
    @send external subscribe: (T.t, (_PlayerSpawnAfterEvent) => unit) => (_PlayerSpawnAfterEvent) => unit = "subscribe"
    @send external unsubscribe: (T.t, (_PlayerSpawnAfterEvent) => unit) => unit = "unsubscribe"
  }
  include Impl({ type t = t })
}

module IPlayerLeaveAfterEventSignal = {
  type t = _IPlayerLeaveAfterEventSignal
  module Impl = ( T: { type t } ) => {
    @send external subscribe: (T.t, (_PlayerLeaveAfterEvent) => unit) => (_PlayerLeaveAfterEvent) => unit = "subscribe"
    @send external unsubscribe: (T.t, (_PlayerLeaveAfterEvent) => unit) => unit = "unsubscribe"
  }
  include Impl({ type t = t })
}

module IPlayerJoinAfterEventSignal = {
  type t = _IPlayerJoinAfterEventSignal
  module Impl = ( T: { type t } ) => {
    @send external subscribe: (T.t, (_PlayerJoinAfterEvent) => unit) => (_PlayerJoinAfterEvent) => unit = "subscribe"
    @send external unsubscribe: (T.t, (_PlayerJoinAfterEvent) => unit) => unit = "unsubscribe"
  }
  include Impl({ type t = t })
}

module Entity = {
  type t = _Entity
  module Impl = ( T: { type t } ) => {
    @send external addEffect: (T.t, @unwrap[ | #EffectType(_EffectType) | #String(string) ], int32, option<entity_effect_options>) => unit = "addEffect"
    @send external addTag: (T.t, string) => bool = "addTag"
    @send external applyDamage: (T.t, float, option<@unwrap[ | #EntityApplyDamageByProjectileOptions(entity_apply_damage_by_projectile_options) | #EntityApplyDamageOptions(entity_apply_damage_options) ]>) => bool = "applyDamage"
    @send external applyImpulse: (T.t, vector3) => unit = "applyImpulse"
    @send external applyKnockback: (T.t, float, float, float, float) => unit = "applyKnockback"
    @send external clearDynamicProperties: (T.t) => unit = "clearDynamicProperties"
    @send external clearVelocity: (T.t) => unit = "clearVelocity"
    @send external extinguishFire: (T.t, option<bool>) => bool = "extinguishFire"
    @send @return(nullable) external getBlockFromViewDirection: (T.t, option<block_raycast_options>) => option<block_raycast_hit> = "getBlockFromViewDirection"
    @send @return(nullable) external getComponent: (T.t, string) => option<_EntityComponent> = "getComponent"
    @send external getComponents: (T.t) => array<_EntityComponent> = "getComponents"
    @send @return(nullable) external getDynamicProperty: (T.t, string) => option<@unwrap[ | #Boolean(bool) | #Double(float) | #Float(float) | #String(string) | #Vector3(vector3) ]> = "getDynamicProperty"
    @send external getDynamicPropertyIds: (T.t) => array<string> = "getDynamicPropertyIds"
    @send external getDynamicPropertyTotalByteCount: (T.t) => int32 = "getDynamicPropertyTotalByteCount"
    @send @return(nullable) external getEffect: (T.t, @unwrap[ | #EffectType(_EffectType) | #String(string) ]) => option<_Effect> = "getEffect"
    @send external getEffects: (T.t) => array<_Effect> = "getEffects"
    @send external getEntitiesFromViewDirection: (T.t, option<entity_raycast_options>) => array<entity_raycast_hit> = "getEntitiesFromViewDirection"
    @send external getHeadLocation: (T.t) => vector3 = "getHeadLocation"
    @send @return(nullable) external getProperty: (T.t, string) => option<@unwrap[ | #Boolean(bool) | #Float(float) | #String(string) ]> = "getProperty"
    @send external getRotation: (T.t) => vector2 = "getRotation"
    @send external getTags: (T.t) => array<string> = "getTags"
    @send external getVelocity: (T.t) => vector3 = "getVelocity"
    @send external getViewDirection: (T.t) => vector3 = "getViewDirection"
    @send external hasComponent: (T.t, string) => bool = "hasComponent"
    @send external hasTag: (T.t, string) => bool = "hasTag"
    @send external isValid: (T.t) => bool = "isValid"
    @send external kill: (T.t) => bool = "kill"
    @send external matches: (T.t, entity_query_options) => bool = "matches"
    @send external playAnimation: (T.t, string, option<play_animation_options>) => unit = "playAnimation"
    @send external remove: (T.t) => unit = "remove"
    @send external removeEffect: (T.t, @unwrap[ | #EffectType(_EffectType) | #String(string) ]) => bool = "removeEffect"
    @send external removeTag: (T.t, string) => bool = "removeTag"
    @send external resetProperty: (T.t, string) => @unwrap[ | #Boolean(bool) | #Float(float) | #String(string) ] = "resetProperty"
    @send external runCommand: (T.t, string) => _CommandResult = "runCommand"
    @send external runCommandAsync: (T.t, string) => promise<_CommandResult> = "runCommandAsync"
    @send external setDynamicProperty: (T.t, string, option<@unwrap[ | #Boolean(bool) | #Double(float) | #Float(float) | #String(string) | #Vector3(vector3) ]>) => unit = "setDynamicProperty"
    @send external setOnFire: (T.t, int32, option<bool>) => bool = "setOnFire"
    @send external setProperty: (T.t, string, @unwrap[ | #Boolean(bool) | #Float(float) | #String(string) ]) => unit = "setProperty"
    @send external setRotation: (T.t, vector2) => unit = "setRotation"
    @send external teleport: (T.t, vector3, option<teleport_options>) => unit = "teleport"
    @send external triggerEvent: (T.t, string) => unit = "triggerEvent"
    @send external tryTeleport: (T.t, vector3, option<teleport_options>) => bool = "tryTeleport"
    @get external dimension: T.t => _Dimension = "dimension"
    @get external fallDistance: T.t => float = "fallDistance"
    @get external id: T.t => string = "id"
    @get external isClimbing: T.t => bool = "isClimbing"
    @get external isFalling: T.t => bool = "isFalling"
    @get external isInWater: T.t => bool = "isInWater"
    @get external isOnGround: T.t => bool = "isOnGround"
    @get external isSleeping: T.t => bool = "isSleeping"
    @get external isSneaking: T.t => bool = "isSneaking"
    @get external isSprinting: T.t => bool = "isSprinting"
    @get external isSwimming: T.t => bool = "isSwimming"
    @get external lifetimeState: T.t => entity_lifetime_state = "lifetimeState"
    @get external location: T.t => vector3 = "location"
    @get external nameTag: T.t => string = "nameTag"
    @get external scoreboardIdentity: T.t => option<_ScoreboardIdentity> = "scoreboardIdentity"
    @get external target: T.t => option<T.t> = "target"
    @get external typeId: T.t => string = "typeId"
    @set external setIsSneaking: (T.t, bool) => unit = "isSneaking"
    @set external setNameTag: (T.t, string) => unit = "nameTag"
  }
  include Impl({ type t = t })
}

module ILeverActionAfterEventSignal = {
  type t = _ILeverActionAfterEventSignal
  module Impl = ( T: { type t } ) => {
    @send external subscribe: (T.t, (_LeverActionAfterEvent) => unit) => (_LeverActionAfterEvent) => unit = "subscribe"
    @send external unsubscribe: (T.t, (_LeverActionAfterEvent) => unit) => unit = "unsubscribe"
  }
  include Impl({ type t = t })
}

module ItemUseOnAfterEvent = {
  type t = _ItemUseOnAfterEvent
  module Impl = ( T: { type t } ) => {
    @get external block: T.t => _Block = "block"
    @get external blockFace: T.t => direction = "blockFace"
    @get external faceLocation: T.t => vector3 = "faceLocation"
    @get external itemStack: T.t => _ItemStack = "itemStack"
    @get external source: T.t => _Player = "source"
  }
  include Impl({ type t = t })
}

module ItemUseAfterEvent = {
  type t = _ItemUseAfterEvent
  module Impl = ( T: { type t } ) => {
    @get external itemStack: T.t => _ItemStack = "itemStack"
    @get external source: T.t => _Player = "source"
    @set external setItemStack: (T.t, _ItemStack) => unit = "itemStack"
  }
  include Impl({ type t = t })
}

module ItemDefinitionTriggeredAfterEvent = {
  type t = _ItemDefinitionTriggeredAfterEvent
  module Impl = ( T: { type t } ) => {
    @get external eventName: T.t => string = "eventName"
    @get external itemStack: T.t => _ItemStack = "itemStack"
    @get external source: T.t => option<_Player> = "source"
    @set external setItemStack: (T.t, _ItemStack) => unit = "itemStack"
  }
  include Impl({ type t = t })
}

module ExplosionAfterEvent = {
  type t = _ExplosionAfterEvent
  module Impl = ( T: { type t } ) => {
    @send external getImpactedBlocks: (T.t) => array<_Block> = "getImpactedBlocks"
    @get external dimension: T.t => _Dimension = "dimension"
    @get external source: T.t => option<_Entity> = "source"
  }
  include Impl({ type t = t })
}

module ChatSendAfterEvent = {
  type t = _ChatSendAfterEvent
  module Impl = ( T: { type t } ) => {
    @send external getTargets: (T.t) => array<_Player> = "getTargets"
    @get external message: T.t => string = "message"
    @get external sender: T.t => _Player = "sender"
    @get external sendToTargets: T.t => bool = "sendToTargets"
    @set external setMessage: (T.t, string) => unit = "message"
    @set external setSender: (T.t, _Player) => unit = "sender"
    @set external setSendToTargets: (T.t, bool) => unit = "sendToTargets"
  }
  include Impl({ type t = t })
}

module IButtonPushAfterEventSignal = {
  type t = _IButtonPushAfterEventSignal
  module Impl = ( T: { type t } ) => {
    @send external subscribe: (T.t, (_ButtonPushAfterEvent) => unit) => (_ButtonPushAfterEvent) => unit = "subscribe"
    @send external unsubscribe: (T.t, (_ButtonPushAfterEvent) => unit) => unit = "unsubscribe"
  }
  include Impl({ type t = t })
}

module BlockEvent = {
  type t = _BlockEvent
  module Impl = ( T: { type t } ) => {
    @get external block: T.t => _Block = "block"
    @get external dimension: T.t => _Dimension = "dimension"
  }
  include Impl({ type t = t })
}

module Component = {
  type t = _Component
  module Impl = ( T: { type t } ) => {
    @send external isValid: (T.t) => bool = "isValid"
    @get external typeId: T.t => string = "typeId"
  }
  include Impl({ type t = t })
}

module ItemComponent = {
  type t = _ItemComponent
  include Component.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
  }
  include Impl({ type t = t })
}

module EntityComponent = {
  type t = _EntityComponent
  include Component.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
    @get external entity: T.t => option<_Entity> = "entity"
  }
  include Impl({ type t = t })
}

module EntityNavigationComponent = {
  type t = _EntityNavigationComponent
  include EntityComponent.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
    @get external avoidDamageBlocks: T.t => bool = "avoidDamageBlocks"
    @get external avoidPortals: T.t => bool = "avoidPortals"
    @get external avoidSun: T.t => bool = "avoidSun"
    @get external avoidWater: T.t => bool = "avoidWater"
    @get external canBreach: T.t => bool = "canBreach"
    @get external canBreakDoors: T.t => bool = "canBreakDoors"
    @get external canFloat: T.t => bool = "canFloat"
    @get external canJump: T.t => bool = "canJump"
    @get external canOpenDoors: T.t => bool = "canOpenDoors"
    @get external canOpenIronDoors: T.t => bool = "canOpenIronDoors"
    @get external canPassDoors: T.t => bool = "canPassDoors"
    @get external canPathFromAir: T.t => bool = "canPathFromAir"
    @get external canPathOverLava: T.t => bool = "canPathOverLava"
    @get external canPathOverWater: T.t => bool = "canPathOverWater"
    @get external canSink: T.t => bool = "canSink"
    @get external canSwim: T.t => bool = "canSwim"
    @get external canWalk: T.t => bool = "canWalk"
    @get external canWalkInLava: T.t => bool = "canWalkInLava"
    @get external isAmphibious: T.t => bool = "isAmphibious"
  }
  include Impl({ type t = t })
}

module EntityBaseMovementComponent = {
  type t = _EntityBaseMovementComponent
  include EntityComponent.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
    @get external maxTurn: T.t => float = "maxTurn"
  }
  include Impl({ type t = t })
}

module EntityAttributeComponent = {
  type t = _EntityAttributeComponent
  include EntityComponent.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
    @send external resetToDefaultValue: (T.t) => unit = "resetToDefaultValue"
    @send external resetToMaxValue: (T.t) => unit = "resetToMaxValue"
    @send external resetToMinValue: (T.t) => unit = "resetToMinValue"
    @send external setCurrentValue: (T.t, float) => bool = "setCurrentValue"
    @get external currentValue: T.t => float = "currentValue"
    @get external defaultValue: T.t => float = "defaultValue"
    @get external effectiveMax: T.t => float = "effectiveMax"
    @get external effectiveMin: T.t => float = "effectiveMin"
  }
  include Impl({ type t = t })
}

module BlockComponent = {
  type t = _BlockComponent
  include Component.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
    @get external block: T.t => _Block = "block"
  }
  include Impl({ type t = t })
}

module BlockLiquidContainerComponent = {
  type t = _BlockLiquidContainerComponent
  include BlockComponent.Impl({ type t = t })
  module Impl = ( T: { type t } ) => {
    @send external isValidLiquid: (T.t) => bool = "isValidLiquid"
    @get external fillLevel: T.t => int32 = "fillLevel"
    @set external setFillLevel: (T.t, int32) => unit = "fillLevel"
  }
  include Impl({ type t = t })
}

module Block = {
  type t = _Block
  @send @return(nullable) external above: (t, int32) => option<t> = "above"
  @send @return(nullable) external below: (t, int32) => option<t> = "below"
  @send external bottomCenter: (t) => vector3 = "bottomCenter"
  @send external canPlace: (t, @unwrap[ | #BlockPermutation(_BlockPermutation) | #BlockType(_BlockType) | #String(string) ], option<direction>) => bool = "canPlace"
  @send external center: (t) => vector3 = "center"
  @send @return(nullable) external east: (t, int32) => option<t> = "east"
  @send @return(nullable) external getComponent: (t, string) => option<_BlockComponent> = "getComponent"
  @send @return(nullable) external getItemStack: (t, int32, bool) => option<_ItemStack> = "getItemStack"
  @send @return(nullable) external getRedstonePower: (t) => option<int32> = "getRedstonePower"
  @send external getTags: (t) => array<string> = "getTags"
  @send external hasTag: (t, string) => bool = "hasTag"
  @send external isValid: (t) => bool = "isValid"
  @send @return(nullable) external north: (t, int32) => option<t> = "north"
  @send @return(nullable) external offset: (t, vector3) => option<t> = "offset"
  @send external setPermutation: (t, _BlockPermutation) => unit = "setPermutation"
  @send external setType: (t, @unwrap[ | #BlockType(_BlockType) | #String(string) ]) => unit = "setType"
  @send @return(nullable) external south: (t, int32) => option<t> = "south"
  @send external trySetPermutation: (t, _BlockPermutation) => bool = "trySetPermutation"
  @send @return(nullable) external west: (t, int32) => option<t> = "west"
  @get external dimension: t => _Dimension = "dimension"
  @get external isAir: t => bool = "isAir"
  @get external isLiquid: t => bool = "isLiquid"
  @get external isSolid: t => bool = "isSolid"
  @get external isWaterlogged: t => bool = "isWaterlogged"
  @get external location: t => vector3 = "location"
  @get external permutation: t => _BlockPermutation = "permutation"
  @get external getType: t => _BlockType = "type"
  @get external typeId: t => string = "typeId"
  @get external x: t => int32 = "x"
  @get external y: t => int32 = "y"
  @get external z: t => int32 = "z"
  @set external setIsWaterlogged: (t, bool) => unit = "isWaterlogged"
}

module BlockAreaSize = {
  type t = _BlockAreaSize
  @send external equals: (t, t) => bool = "equals"
  @get external x: t => int32 = "x"
  @get external y: t => int32 = "y"
  @get external z: t => int32 = "z"
  @set external setX: (t, int32) => unit = "x"
  @set external setY: (t, int32) => unit = "y"
  @set external setZ: (t, int32) => unit = "z"
  @new external make: (float, float, float) => t = "BlockAreaSize"
}

module BlockExplodeAfterEvent = {
  type t = _BlockExplodeAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external explodedBlockPermutation: t => _BlockPermutation = "explodedBlockPermutation"
  @get external source: t => option<_Entity> = "source"
}

module BlockExplodeAfterEventSignal = {
  type t = _BlockExplodeAfterEventSignal
  @send external subscribe: (t, (_BlockExplodeAfterEvent) => unit) => (_BlockExplodeAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_BlockExplodeAfterEvent) => unit) => unit = "unsubscribe"
}

module BlockInventoryComponent = {
  type t = _BlockInventoryComponent
  include BlockComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockInventoryComponent") @val external componentId: string = "componentId"
  @get external container: t => option<_Container> = "container"
}

module BlockLavaContainerComponent = {
  type t = _BlockLavaContainerComponent
  include BlockLiquidContainerComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockLavaContainerComponent") @val external componentId: string = "componentId"
}

module BlockLocationIterator = {
  type t = _BlockLocationIterator
}

module BlockPermutation = {
  type t = _BlockPermutation
  @send external clone: (t) => t = "clone"
  @send external getAllStates: (t) => Belt.Map.String.t<@unwrap[ | #Boolean(bool) | #Int32(int32) | #String(string) ]> = "getAllStates"
  @send @return(nullable) external getItemStack: (t, int32) => option<_ItemStack> = "getItemStack"
  @send @return(nullable) external getState: (t, string) => option<@unwrap[ | #Boolean(bool) | #Int32(int32) | #String(string) ]> = "getState"
  @send external getTags: (t) => array<string> = "getTags"
  @send external hasTag: (t, string) => bool = "hasTag"
  @send external matches: (t, string, option<Belt.Map.String.t<@unwrap[ | #Boolean(bool) | #Int32(int32) | #String(string) ]>>) => bool = "matches"
  @send external resolve: (t, string, option<Belt.Map.String.t<@unwrap[ | #Boolean(bool) | #Int32(int32) | #String(string) ]>>) => t = "resolve"
  @send external withState: (t, string, @unwrap[ | #Boolean(bool) | #Int32(int32) | #String(string) ]) => t = "withState"
  @get external getType: t => _BlockType = "type"
}

module BlockPistonComponent = {
  type t = _BlockPistonComponent
  include BlockComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockPistonComponent") @val external componentId: string = "componentId"
  @send external getAttachedBlocks: (t) => array<vector3> = "getAttachedBlocks"
  @get external isExpanded: t => bool = "isExpanded"
  @get external isExpanding: t => bool = "isExpanding"
  @get external isMoving: t => bool = "isMoving"
  @get external isRetracted: t => bool = "isRetracted"
  @get external isRetracting: t => bool = "isRetracting"
}

module BlockPotionContainerComponent = {
  type t = _BlockPotionContainerComponent
  include BlockLiquidContainerComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockPotionContainerComponent") @val external componentId: string = "componentId"
  @send external setPotionType: (t, _ItemStack) => unit = "setPotionType"
}

module BlockRecordPlayerComponent = {
  type t = _BlockRecordPlayerComponent
  include BlockComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockRecordPlayerComponent") @val external componentId: string = "componentId"
  @send external clearRecord: (t) => unit = "clearRecord"
  @send external isPlaying: (t) => bool = "isPlaying"
  @send external setRecord: (t, @unwrap[ | #ItemType(_ItemType) | #String(string) ]) => unit = "setRecord"
}

module BlockSignComponent = {
  type t = _BlockSignComponent
  include BlockComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockSignComponent") @val external componentId: string = "componentId"
  @send @return(nullable) external getRawText: (t, sign_side) => option<raw_text> = "getRawText"
  @send @return(nullable) external getText: (t, sign_side) => option<string> = "getText"
  @send @return(nullable) external getTextDyeColor: (t, sign_side) => option<dye_color> = "getTextDyeColor"
  @send external setText: (t, @unwrap[ | #RawMessage(raw_message) | #RawText(raw_text) | #String(string) ], sign_side) => unit = "setText"
  @send external setTextDyeColor: (t, option<dye_color>, sign_side) => unit = "setTextDyeColor"
  @send external setWaxed: (t) => unit = "setWaxed"
  @get external isWaxed: t => bool = "isWaxed"
}

module BlockSnowContainerComponent = {
  type t = _BlockSnowContainerComponent
  include BlockLiquidContainerComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockSnowContainerComponent") @val external componentId: string = "componentId"
}

module BlockStates = {
  type t = _BlockStates
  @send @return(nullable) external get: (t, string) => option<_BlockStateType> = "get"
  @send external getAll: (t) => array<_BlockStateType> = "getAll"
}

module BlockStateType = {
  type t = _BlockStateType
  @get external id: t => string = "id"
  @get external validValues: t => array<@unwrap[ | #Boolean(bool) | #Int32(int32) | #String(string) ]> = "validValues"
}

module BlockType = {
  type t = _BlockType
  @get external canBeWaterlogged: t => bool = "canBeWaterlogged"
  @get external id: t => string = "id"
}

module BlockTypes = {
  type t = _BlockTypes
  @send @return(nullable) external get: (t, string) => option<_BlockType> = "get"
  @send external getAll: (t) => array<_BlockType> = "getAll"
}

module BlockVolumeUtils = {
  type t = _BlockVolumeUtils
  @send external doesLocationTouchFaces: (t, block_volume, vector3) => bool = "doesLocationTouchFaces"
  @send external doesVolumeTouchFaces: (t, block_volume, block_volume) => bool = "doesVolumeTouchFaces"
  @send external equals: (t, block_volume, block_volume) => bool = "equals"
  @send external getBlockLocationIterator: (t, block_volume) => _BlockLocationIterator = "getBlockLocationIterator"
  @send external getBoundingBox: (t, block_volume) => bounding_box = "getBoundingBox"
  @send external getCapacity: (t, block_volume) => int32 = "getCapacity"
  @send external getMax: (t, block_volume) => vector3 = "getMax"
  @send external getMin: (t, block_volume) => vector3 = "getMin"
  @send external getSpan: (t, block_volume) => vector3 = "getSpan"
  @send external intersects: (t, block_volume, block_volume) => block_volume_intersection = "intersects"
  @send external isInside: (t, block_volume, vector3) => bool = "isInside"
  @send external translate: (t, block_volume, vector3) => block_volume = "translate"
}

module BlockWaterContainerComponent = {
  type t = _BlockWaterContainerComponent
  include BlockLiquidContainerComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("BlockWaterContainerComponent") @val external componentId: string = "componentId"
  @send external addDye: (t, _ItemType) => unit = "addDye"
  @send external getCustomColor: (t) => rgba = "getCustomColor"
  @send external setCustomColor: (t, rgba) => unit = "setCustomColor"
}

module BoundingBoxUtils = {
  type t = _BoundingBoxUtils
  @send external createValid: (t, vector3, vector3) => bounding_box = "createValid"
  @send external dilate: (t, bounding_box, vector3) => bounding_box = "dilate"
  @send external equals: (t, bounding_box, bounding_box) => bool = "equals"
  @send external expand: (t, bounding_box, bounding_box) => bounding_box = "expand"
  @send external getCenter: (t, bounding_box) => vector3 = "getCenter"
  @send @return(nullable) external getIntersection: (t, bounding_box, bounding_box) => option<bounding_box> = "getIntersection"
  @send external getSpan: (t, bounding_box) => vector3 = "getSpan"
  @send external intersects: (t, bounding_box, bounding_box) => bool = "intersects"
  @send external isInside: (t, bounding_box, vector3) => bool = "isInside"
  @send external isValid: (t, bounding_box) => bool = "isValid"
  @send external translate: (t, bounding_box, vector3) => bounding_box = "translate"
}

module ButtonPushAfterEvent = {
  type t = _ButtonPushAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external source: t => _Entity = "source"
}

module ButtonPushAfterEventSignal = {
  type t = _ButtonPushAfterEventSignal
  include IButtonPushAfterEventSignal.Impl({ type t = t })
}

module Camera = {
  type t = _Camera
  @send external clear: (t) => unit = "clear"
  @send external fade: (t, option<camera_fade_options>) => unit = "fade"
  @send external setCamera: (t, string, option<option<@unwrap[ | #CameraDefaultOptions(camera_default_options) | #CameraSetFacingOptions(camera_set_facing_options) | #CameraSetLocationOptions(camera_set_location_options) | #CameraSetPosOptions(camera_set_pos_options) | #CameraSetRotOptions(camera_set_rot_options) ]>>) => unit = "setCamera"
}

module ChatSendAfterEventSignal = {
  type t = _ChatSendAfterEventSignal
  @send external subscribe: (t, (_ChatSendAfterEvent) => unit) => (_ChatSendAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ChatSendAfterEvent) => unit) => unit = "unsubscribe"
}

module ChatSendBeforeEvent = {
  type t = _ChatSendBeforeEvent
  include ChatSendAfterEvent.Impl({ type t = t })
  @send external setTargets: (t, array<_Player>) => unit = "setTargets"
  @get external cancel: t => bool = "cancel"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module ChatSendBeforeEventSignal = {
  type t = _ChatSendBeforeEventSignal
  @send external subscribe: (t, (_ChatSendBeforeEvent) => unit) => (_ChatSendBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ChatSendBeforeEvent) => unit) => unit = "unsubscribe"
}

module CommandResult = {
  type t = _CommandResult
  @get external successCount: t => int32 = "successCount"
}

module CompoundBlockVolume = {
  type t = _CompoundBlockVolume
  @send external clear: (t) => unit = "clear"
  @send external getBlockLocationIterator: (t) => _BlockLocationIterator = "getBlockLocationIterator"
  @send external getBoundingBox: (t) => bounding_box = "getBoundingBox"
  @send external getMax: (t) => vector3 = "getMax"
  @send external getMin: (t) => vector3 = "getMin"
  @send external getOrigin: (t) => vector3 = "getOrigin"
  @send external isEmpty: (t) => bool = "isEmpty"
  @send external isInside: (t, vector3) => bool = "isInside"
  @send @return(nullable) external peekLastVolume: (t, option<compound_block_volume_position_relativity>) => option<compound_block_volume_item> = "peekLastVolume"
  @send external popVolume: (t) => bool = "popVolume"
  @send external pushVolume: (t, compound_block_volume_item) => unit = "pushVolume"
  @send external replaceOrAddLastVolume: (t, compound_block_volume_item) => bool = "replaceOrAddLastVolume"
  @send external setOrigin: (t, vector3, option<bool>) => unit = "setOrigin"
  @send external translateOrigin: (t, vector3, option<bool>) => unit = "translateOrigin"
  @get external capacity: t => int32 = "capacity"
  @get external volumeCount: t => int32 = "volumeCount"
  @new external make: (option<vector3>) => t = "CompoundBlockVolume"
}

module Container = {
  type t = _Container
  @send @return(nullable) external addItem: (t, _ItemStack) => option<_ItemStack> = "addItem"
  @send external clearAll: (t) => unit = "clearAll"
  @send @return(nullable) external getItem: (t, int32) => option<_ItemStack> = "getItem"
  @send external getSlot: (t, int32) => _ContainerSlot = "getSlot"
  @send external isValid: (t) => bool = "isValid"
  @send external moveItem: (t, int32, int32, t) => unit = "moveItem"
  @send external setItem: (t, int32, option<_ItemStack>) => unit = "setItem"
  @send external swapItems: (t, int32, int32, t) => unit = "swapItems"
  @send @return(nullable) external transferItem: (t, int32, t) => option<_ItemStack> = "transferItem"
  @get external emptySlotsCount: t => int32 = "emptySlotsCount"
  @get external size: t => int32 = "size"
}

module ContainerSlot = {
  type t = _ContainerSlot
  @send @return(nullable) external getItem: (t) => option<_ItemStack> = "getItem"
  @send external getLore: (t) => array<string> = "getLore"
  @send external getTags: (t) => array<string> = "getTags"
  @send external hasTag: (t, string) => bool = "hasTag"
  @send external isStackableWith: (t, _ItemStack) => bool = "isStackableWith"
  @send external isValid: (t) => bool = "isValid"
  @send external setCanDestroy: (t, option<array<string>>) => unit = "setCanDestroy"
  @send external setCanPlaceOn: (t, option<array<string>>) => unit = "setCanPlaceOn"
  @send external setItem: (t, option<_ItemStack>) => unit = "setItem"
  @send external setLore: (t, option<array<string>>) => unit = "setLore"
  @get external amount: t => int32 = "amount"
  @get external isStackable: t => bool = "isStackable"
  @get external keepOnDeath: t => bool = "keepOnDeath"
  @get external lockMode: t => item_lock_mode = "lockMode"
  @get external maxAmount: t => int32 = "maxAmount"
  @get external nameTag: t => option<string> = "nameTag"
  @get external getType: t => _ItemType = "type"
  @get external typeId: t => option<string> = "typeId"
  @set external setAmount: (t, int32) => unit = "amount"
  @set external setKeepOnDeath: (t, bool) => unit = "keepOnDeath"
  @set external setLockMode: (t, item_lock_mode) => unit = "lockMode"
  @set external setNameTag: (t, option<string>) => unit = "nameTag"
}

module DataDrivenEntityTriggerAfterEvent = {
  type t = _DataDrivenEntityTriggerAfterEvent
  @send external getModifiers: (t) => array<definition_modifier> = "getModifiers"
  @get external entity: t => _Entity = "entity"
  @get external eventId: t => string = "eventId"
}

module DataDrivenEntityTriggerAfterEventSignal = {
  type t = _DataDrivenEntityTriggerAfterEventSignal
  @send external subscribe: (t, (_DataDrivenEntityTriggerAfterEvent) => unit, option<entity_data_driven_trigger_event_options>) => (_DataDrivenEntityTriggerAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_DataDrivenEntityTriggerAfterEvent) => unit) => unit = "unsubscribe"
}

module DataDrivenEntityTriggerBeforeEvent = {
  type t = _DataDrivenEntityTriggerBeforeEvent
  @send external getModifiers: (t) => array<definition_modifier> = "getModifiers"
  @send external setModifiers: (t, array<definition_modifier>) => unit = "setModifiers"
  @get external cancel: t => bool = "cancel"
  @get external entity: t => _Entity = "entity"
  @get external id: t => string = "id"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module DataDrivenEntityTriggerBeforeEventSignal = {
  type t = _DataDrivenEntityTriggerBeforeEventSignal
  @send external subscribe: (t, (_DataDrivenEntityTriggerBeforeEvent) => unit, option<entity_data_driven_trigger_event_options>) => (_DataDrivenEntityTriggerBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_DataDrivenEntityTriggerBeforeEvent) => unit) => unit = "unsubscribe"
}

module Dimension = {
  type t = _Dimension
  @send external createExplosion: (t, vector3, float, option<explosion_options>) => unit = "createExplosion"
  @send external fillBlocks: (t, vector3, vector3, @unwrap[ | #BlockPermutation(_BlockPermutation) | #BlockType(_BlockType) | #String(string) ], option<block_fill_options>) => int32 = "fillBlocks"
  @send @return(nullable) external getBlock: (t, vector3) => option<_Block> = "getBlock"
  @send @return(nullable) external getBlockFromRay: (t, vector3, vector3, option<block_raycast_options>) => option<block_raycast_hit> = "getBlockFromRay"
  @send external getEntities: (t, option<entity_query_options>) => array<_Entity> = "getEntities"
  @send external getEntitiesAtBlockLocation: (t, vector3) => array<_Entity> = "getEntitiesAtBlockLocation"
  @send external getEntitiesFromRay: (t, vector3, vector3, option<entity_raycast_options>) => array<entity_raycast_hit> = "getEntitiesFromRay"
  @send external getPlayers: (t, option<entity_query_options>) => array<_Player> = "getPlayers"
  @send external getWeather: (t) => weather_type = "getWeather"
  @send external runCommand: (t, string) => _CommandResult = "runCommand"
  @send external runCommandAsync: (t, string) => promise<_CommandResult> = "runCommandAsync"
  @send external setWeather: (t, weather_type, option<int32>) => unit = "setWeather"
  @send external spawnEntity: (t, string, vector3) => _Entity = "spawnEntity"
  @send external spawnItem: (t, _ItemStack, vector3) => _Entity = "spawnItem"
  @send external spawnParticle: (t, string, vector3, option<_MolangVariableMap>) => unit = "spawnParticle"
  @get external heightRange: t => number_range = "heightRange"
  @get external id: t => string = "id"
}

module DimensionType = {
  type t = _DimensionType
  @get external typeId: t => string = "typeId"
}

module DimensionTypes = {
  type t = _DimensionTypes
  @send @return(nullable) external get: (t, string) => option<_DimensionType> = "get"
  @send external getAll: (t) => array<_DimensionType> = "getAll"
}

module Effect = {
  type t = _Effect
  @send external isValid: (t) => bool = "isValid"
  @get external amplifier: t => int32 = "amplifier"
  @get external displayName: t => string = "displayName"
  @get external duration: t => int32 = "duration"
  @get external typeId: t => string = "typeId"
}

module EffectAddAfterEvent = {
  type t = _EffectAddAfterEvent
  @get external effect: t => _Effect = "effect"
  @get external entity: t => _Entity = "entity"
  @set external setEffect: (t, _Effect) => unit = "effect"
  @set external setEntity: (t, _Entity) => unit = "entity"
}

module EffectAddAfterEventSignal = {
  type t = _EffectAddAfterEventSignal
  @send external subscribe: (t, (_EffectAddAfterEvent) => unit, option<entity_event_options>) => (_EffectAddAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EffectAddAfterEvent) => unit) => unit = "unsubscribe"
}

module EffectAddBeforeEvent = {
  type t = _EffectAddBeforeEvent
  @get external cancel: t => bool = "cancel"
  @get external duration: t => int32 = "duration"
  @get external effectType: t => string = "effectType"
  @get external entity: t => _Entity = "entity"
  @set external setCancel: (t, bool) => unit = "cancel"
  @set external setDuration: (t, int32) => unit = "duration"
}

module EffectAddBeforeEventSignal = {
  type t = _EffectAddBeforeEventSignal
  @send external subscribe: (t, (_EffectAddBeforeEvent) => unit) => (_EffectAddBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EffectAddBeforeEvent) => unit) => unit = "unsubscribe"
}

module EffectType = {
  type t = _EffectType
  @send external getName: (t) => string = "getName"
}

module EffectTypes = {
  type t = _EffectTypes
  @send @return(nullable) external get: (t, string) => option<_EffectType> = "get"
  @send external getAll: (t) => array<_EffectType> = "getAll"
}

module Enchantment = {
  type t = _Enchantment
  @get external level: t => int32 = "level"
  @get external getType: t => _EnchantmentType = "type"
  @set external setLevel: (t, int32) => unit = "level"
  @new external make: (@unwrap[ | #EnchantmentType(_EnchantmentType) | #String(string) ], int32) => t = "Enchantment"
}

module EnchantmentList = {
  type t = _EnchantmentList
  @send external addEnchantment: (t, _Enchantment) => bool = "addEnchantment"
  @send external canAddEnchantment: (t, _Enchantment) => bool = "canAddEnchantment"
  @send @return(nullable) external getEnchantment: (t, @unwrap[ | #EnchantmentType(_EnchantmentType) | #String(string) ]) => option<_Enchantment> = "getEnchantment"
  @send external hasEnchantment: (t, @unwrap[ | #EnchantmentType(_EnchantmentType) | #String(string) ]) => int32 = "hasEnchantment"
  @send external removeEnchantment: (t, @unwrap[ | #EnchantmentType(_EnchantmentType) | #String(string) ]) => unit = "removeEnchantment"
  @get external slot: t => int32 = "slot"
  @new external make: (int32) => t = "EnchantmentList"
}

module EnchantmentSlot = {
  type t = _EnchantmentSlot
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external all: int32 = "all"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external armorFeet: int32 = "armorFeet"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external armorHead: int32 = "armorHead"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external armorLegs: int32 = "armorLegs"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external armorTorso: int32 = "armorTorso"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external axe: int32 = "axe"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external bow: int32 = "bow"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external carrotStick: int32 = "carrotStick"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external cosmeticHead: int32 = "cosmeticHead"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external crossbow: int32 = "crossbow"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external elytra: int32 = "elytra"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external fishingRod: int32 = "fishingRod"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external flintsteel: int32 = "flintsteel"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external gArmor: int32 = "gArmor"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external gDigging: int32 = "gDigging"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external gTool: int32 = "gTool"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external hoe: int32 = "hoe"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external none: int32 = "none"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external pickaxe: int32 = "pickaxe"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external shears: int32 = "shears"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external shield: int32 = "shield"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external shovel: int32 = "shovel"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external spear: int32 = "spear"
  @module("@minecraft/server") @scope("EnchantmentSlot") @val external sword: int32 = "sword"
}

module EnchantmentType = {
  type t = _EnchantmentType
  @get external id: t => string = "id"
  @get external maxLevel: t => int32 = "maxLevel"
}

module EnchantmentTypes = {
  type t = _EnchantmentTypes
  @send @return(nullable) external get: (t, string) => option<_EnchantmentType> = "get"
}

module EntityAddRiderComponent = {
  type t = _EntityAddRiderComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityAddRiderComponent") @val external componentId: string = "componentId"
  @get external entityType: t => string = "entityType"
  @get external spawnEvent: t => string = "spawnEvent"
}

module EntityAgeableComponent = {
  type t = _EntityAgeableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityAgeableComponent") @val external componentId: string = "componentId"
  @send external getDropItems: (t) => array<string> = "getDropItems"
  @send external getFeedItems: (t) => array<_EntityDefinitionFeedItem> = "getFeedItems"
  @get external duration: t => float = "duration"
  @get external growUp: t => _Trigger = "growUp"
}

module EntityBreathableComponent = {
  type t = _EntityBreathableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityBreathableComponent") @val external componentId: string = "componentId"
  @send external getBreatheBlocks: (t) => array<_BlockPermutation> = "getBreatheBlocks"
  @send external getNonBreatheBlocks: (t) => array<_BlockPermutation> = "getNonBreatheBlocks"
  @send external setAirSupply: (t, int32) => unit = "setAirSupply"
  @get external breathesAir: t => bool = "breathesAir"
  @get external breathesLava: t => bool = "breathesLava"
  @get external breathesSolids: t => bool = "breathesSolids"
  @get external breathesWater: t => bool = "breathesWater"
  @get external generatesBubbles: t => bool = "generatesBubbles"
  @get external inhaleTime: t => float = "inhaleTime"
  @get external suffocateTime: t => int32 = "suffocateTime"
  @get external totalSupply: t => int32 = "totalSupply"
}

module EntityCanClimbComponent = {
  type t = _EntityCanClimbComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityCanClimbComponent") @val external componentId: string = "componentId"
}

module EntityCanFlyComponent = {
  type t = _EntityCanFlyComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityCanFlyComponent") @val external componentId: string = "componentId"
}

module EntityCanPowerJumpComponent = {
  type t = _EntityCanPowerJumpComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityCanPowerJumpComponent") @val external componentId: string = "componentId"
}

module EntityColorComponent = {
  type t = _EntityColorComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityColorComponent") @val external componentId: string = "componentId"
  @get external value: t => int32 = "value"
  @set external setValue: (t, int32) => unit = "value"
}

module EntityDefinitionFeedItem = {
  type t = _EntityDefinitionFeedItem
  @get external growth: t => float = "growth"
  @get external item: t => string = "item"
}

module EntityDieAfterEvent = {
  type t = _EntityDieAfterEvent
  @get external damageSource: t => entity_damage_source = "damageSource"
  @get external deadEntity: t => _Entity = "deadEntity"
}

module EntityDieAfterEventSignal = {
  type t = _EntityDieAfterEventSignal
  @send external subscribe: (t, (_EntityDieAfterEvent) => unit, option<entity_event_options>) => (_EntityDieAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityDieAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityEquippableComponent = {
  type t = _EntityEquippableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityEquippableComponent") @val external componentId: string = "componentId"
  @send @return(nullable) external getEquipment: (t, equipment_slot) => option<_ItemStack> = "getEquipment"
  @send external getEquipmentSlot: (t, equipment_slot) => _ContainerSlot = "getEquipmentSlot"
  @send external setEquipment: (t, equipment_slot, option<_ItemStack>) => bool = "setEquipment"
}

module EntityFireImmuneComponent = {
  type t = _EntityFireImmuneComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityFireImmuneComponent") @val external componentId: string = "componentId"
}

module EntityFloatsInLiquidComponent = {
  type t = _EntityFloatsInLiquidComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityFloatsInLiquidComponent") @val external componentId: string = "componentId"
}

module EntityFlyingSpeedComponent = {
  type t = _EntityFlyingSpeedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityFlyingSpeedComponent") @val external componentId: string = "componentId"
  @get external value: t => float = "value"
  @set external setValue: (t, float) => unit = "value"
}

module EntityFrictionModifierComponent = {
  type t = _EntityFrictionModifierComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityFrictionModifierComponent") @val external componentId: string = "componentId"
  @get external value: t => float = "value"
  @set external setValue: (t, float) => unit = "value"
}

module EntityGroundOffsetComponent = {
  type t = _EntityGroundOffsetComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityGroundOffsetComponent") @val external componentId: string = "componentId"
  @get external value: t => float = "value"
  @set external setValue: (t, float) => unit = "value"
}

module EntityHealableComponent = {
  type t = _EntityHealableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityHealableComponent") @val external componentId: string = "componentId"
  @send external getFeedItems: (t) => array<_FeedItem> = "getFeedItems"
  @get external filters: t => _FilterGroup = "filters"
  @get external forceUse: t => bool = "forceUse"
}

module EntityHealthChangedAfterEvent = {
  type t = _EntityHealthChangedAfterEvent
  @get external entity: t => _Entity = "entity"
  @get external newValue: t => float = "newValue"
  @get external oldValue: t => float = "oldValue"
}

module EntityHealthChangedAfterEventSignal = {
  type t = _EntityHealthChangedAfterEventSignal
  @send external subscribe: (t, (_EntityHealthChangedAfterEvent) => unit, option<entity_event_options>) => (_EntityHealthChangedAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityHealthChangedAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityHealthComponent = {
  type t = _EntityHealthComponent
  include EntityAttributeComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityHealthComponent") @val external componentId: string = "componentId"
}

module EntityHitBlockAfterEvent = {
  type t = _EntityHitBlockAfterEvent
  @get external blockFace: t => direction = "blockFace"
  @get external damagingEntity: t => _Entity = "damagingEntity"
  @get external hitBlock: t => _Block = "hitBlock"
}

module EntityHitBlockAfterEventSignal = {
  type t = _EntityHitBlockAfterEventSignal
  @send external subscribe: (t, (_EntityHitBlockAfterEvent) => unit, option<entity_event_options>) => (_EntityHitBlockAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityHitBlockAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityHitEntityAfterEvent = {
  type t = _EntityHitEntityAfterEvent
  @get external damagingEntity: t => _Entity = "damagingEntity"
  @get external hitEntity: t => _Entity = "hitEntity"
}

module EntityHitEntityAfterEventSignal = {
  type t = _EntityHitEntityAfterEventSignal
  @send external subscribe: (t, (_EntityHitEntityAfterEvent) => unit, option<entity_event_options>) => (_EntityHitEntityAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityHitEntityAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityHurtAfterEvent = {
  type t = _EntityHurtAfterEvent
  @get external damage: t => float = "damage"
  @get external damageSource: t => entity_damage_source = "damageSource"
  @get external hurtEntity: t => _Entity = "hurtEntity"
}

module EntityHurtAfterEventSignal = {
  type t = _EntityHurtAfterEventSignal
  @send external subscribe: (t, (_EntityHurtAfterEvent) => unit, option<entity_event_options>) => (_EntityHurtAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityHurtAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityInventoryComponent = {
  type t = _EntityInventoryComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityInventoryComponent") @val external componentId: string = "componentId"
  @get external additionalSlotsPerStrength: t => int32 = "additionalSlotsPerStrength"
  @get external canBeSiphonedFrom: t => bool = "canBeSiphonedFrom"
  @get external container: t => option<_Container> = "container"
  @get external containerType: t => string = "containerType"
  @get external inventorySize: t => int32 = "inventorySize"
  @get external getPrivate: t => bool = "private"
  @get external restrictToOwner: t => bool = "restrictToOwner"
}

module EntityIsBabyComponent = {
  type t = _EntityIsBabyComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsBabyComponent") @val external componentId: string = "componentId"
}

module EntityIsChargedComponent = {
  type t = _EntityIsChargedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsChargedComponent") @val external componentId: string = "componentId"
}

module EntityIsChestedComponent = {
  type t = _EntityIsChestedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsChestedComponent") @val external componentId: string = "componentId"
}

module EntityIsDyeableComponent = {
  type t = _EntityIsDyeableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsDyeableComponent") @val external componentId: string = "componentId"
}

module EntityIsHiddenWhenInvisibleComponent = {
  type t = _EntityIsHiddenWhenInvisibleComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsHiddenWhenInvisibleComponent") @val external componentId: string = "componentId"
}

module EntityIsIgnitedComponent = {
  type t = _EntityIsIgnitedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsIgnitedComponent") @val external componentId: string = "componentId"
}

module EntityIsIllagerCaptainComponent = {
  type t = _EntityIsIllagerCaptainComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsIllagerCaptainComponent") @val external componentId: string = "componentId"
}

module EntityIsSaddledComponent = {
  type t = _EntityIsSaddledComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsSaddledComponent") @val external componentId: string = "componentId"
}

module EntityIsShakingComponent = {
  type t = _EntityIsShakingComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsShakingComponent") @val external componentId: string = "componentId"
}

module EntityIsShearedComponent = {
  type t = _EntityIsShearedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsShearedComponent") @val external componentId: string = "componentId"
}

module EntityIsStackableComponent = {
  type t = _EntityIsStackableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsStackableComponent") @val external componentId: string = "componentId"
}

module EntityIsStunnedComponent = {
  type t = _EntityIsStunnedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsStunnedComponent") @val external componentId: string = "componentId"
}

module EntityIsTamedComponent = {
  type t = _EntityIsTamedComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityIsTamedComponent") @val external componentId: string = "componentId"
}

module EntityItemComponent = {
  type t = _EntityItemComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityItemComponent") @val external componentId: string = "componentId"
  @get external itemStack: t => _ItemStack = "itemStack"
}

module EntityIterator = {
  type t = _EntityIterator
}

module EntityLavaMovementComponent = {
  type t = _EntityLavaMovementComponent
  include EntityAttributeComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityLavaMovementComponent") @val external componentId: string = "componentId"
}

module EntityLeashableComponent = {
  type t = _EntityLeashableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityLeashableComponent") @val external componentId: string = "componentId"
  @send external leash: (t, _Entity) => unit = "leash"
  @send external unleash: (t) => unit = "unleash"
  @get external softDistance: t => float = "softDistance"
}

module EntityLoadAfterEvent = {
  type t = _EntityLoadAfterEvent
  @get external entity: t => _Entity = "entity"
  @set external setEntity: (t, _Entity) => unit = "entity"
}

module EntityLoadAfterEventSignal = {
  type t = _EntityLoadAfterEventSignal
  @send external subscribe: (t, (_EntityLoadAfterEvent) => unit) => (_EntityLoadAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityLoadAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityMarkVariantComponent = {
  type t = _EntityMarkVariantComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMarkVariantComponent") @val external componentId: string = "componentId"
  @get external value: t => int32 = "value"
  @set external setValue: (t, int32) => unit = "value"
}

module EntityMountTamingComponent = {
  type t = _EntityMountTamingComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMountTamingComponent") @val external componentId: string = "componentId"
  @send external setTamed: (t, bool) => unit = "setTamed"
}

module EntityMovementAmphibiousComponent = {
  type t = _EntityMovementAmphibiousComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementAmphibiousComponent") @val external componentId: string = "componentId"
}

module EntityMovementBasicComponent = {
  type t = _EntityMovementBasicComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementBasicComponent") @val external componentId: string = "componentId"
}

module EntityMovementComponent = {
  type t = _EntityMovementComponent
  include EntityAttributeComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementComponent") @val external componentId: string = "componentId"
}

module EntityMovementFlyComponent = {
  type t = _EntityMovementFlyComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementFlyComponent") @val external componentId: string = "componentId"
}

module EntityMovementGenericComponent = {
  type t = _EntityMovementGenericComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementGenericComponent") @val external componentId: string = "componentId"
}

module EntityMovementGlideComponent = {
  type t = _EntityMovementGlideComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementGlideComponent") @val external componentId: string = "componentId"
  @get external speedWhenTurning: t => float = "speedWhenTurning"
  @get external startSpeed: t => float = "startSpeed"
}

module EntityMovementHoverComponent = {
  type t = _EntityMovementHoverComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementHoverComponent") @val external componentId: string = "componentId"
}

module EntityMovementJumpComponent = {
  type t = _EntityMovementJumpComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementJumpComponent") @val external componentId: string = "componentId"
}

module EntityMovementSkipComponent = {
  type t = _EntityMovementSkipComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementSkipComponent") @val external componentId: string = "componentId"
}

module EntityMovementSwayComponent = {
  type t = _EntityMovementSwayComponent
  include EntityBaseMovementComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityMovementSwayComponent") @val external componentId: string = "componentId"
  @get external swayAmplitude: t => float = "swayAmplitude"
  @get external swayFrequency: t => float = "swayFrequency"
}

module EntityNavigationClimbComponent = {
  type t = _EntityNavigationClimbComponent
  include EntityNavigationComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNavigationClimbComponent") @val external componentId: string = "componentId"
}

module EntityNavigationFloatComponent = {
  type t = _EntityNavigationFloatComponent
  include EntityNavigationComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNavigationFloatComponent") @val external componentId: string = "componentId"
}

module EntityNavigationFlyComponent = {
  type t = _EntityNavigationFlyComponent
  include EntityNavigationComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNavigationFlyComponent") @val external componentId: string = "componentId"
}

module EntityNavigationGenericComponent = {
  type t = _EntityNavigationGenericComponent
  include EntityNavigationComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNavigationGenericComponent") @val external componentId: string = "componentId"
}

module EntityNavigationHoverComponent = {
  type t = _EntityNavigationHoverComponent
  include EntityNavigationComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNavigationHoverComponent") @val external componentId: string = "componentId"
}

module EntityNavigationWalkComponent = {
  type t = _EntityNavigationWalkComponent
  include EntityNavigationComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNavigationWalkComponent") @val external componentId: string = "componentId"
}

module EntityNpcComponent = {
  type t = _EntityNpcComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityNpcComponent") @val external componentId: string = "componentId"
  @get external defaultScene: t => string = "defaultScene"
  @get external name: t => string = "name"
  @get external skinIndex: t => int32 = "skinIndex"
  @set external setDefaultScene: (t, string) => unit = "defaultScene"
  @set external setName: (t, string) => unit = "name"
  @set external setSkinIndex: (t, int32) => unit = "skinIndex"
}

module EntityOnFireComponent = {
  type t = _EntityOnFireComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityOnFireComponent") @val external componentId: string = "componentId"
  @get external onFireTicksRemaining: t => int32 = "onFireTicksRemaining"
}

module EntityPushThroughComponent = {
  type t = _EntityPushThroughComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityPushThroughComponent") @val external componentId: string = "componentId"
  @get external value: t => float = "value"
  @set external setValue: (t, float) => unit = "value"
}

module EntityRemoveAfterEvent = {
  type t = _EntityRemoveAfterEvent
  @get external removedEntityId: t => string = "removedEntityId"
  @get external typeId: t => string = "typeId"
}

module EntityRemoveAfterEventSignal = {
  type t = _EntityRemoveAfterEventSignal
  @send external subscribe: (t, (_EntityRemoveAfterEvent) => unit, option<entity_event_options>) => (_EntityRemoveAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityRemoveAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityRemoveBeforeEvent = {
  type t = _EntityRemoveBeforeEvent
  @get external removedEntity: t => _Entity = "removedEntity"
}

module EntityRemoveBeforeEventSignal = {
  type t = _EntityRemoveBeforeEventSignal
  @send external subscribe: (t, (_EntityRemoveBeforeEvent) => unit) => (_EntityRemoveBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntityRemoveBeforeEvent) => unit) => unit = "unsubscribe"
}

module EntityRideableComponent = {
  type t = _EntityRideableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityRideableComponent") @val external componentId: string = "componentId"
  @send external addRider: (t, _Entity) => bool = "addRider"
  @send external ejectRider: (t, _Entity) => unit = "ejectRider"
  @send external ejectRiders: (t) => unit = "ejectRiders"
  @send external getFamilyTypes: (t) => array<string> = "getFamilyTypes"
  @send external getRiders: (t) => array<_Entity> = "getRiders"
  @send external getSeats: (t) => array<_Seat> = "getSeats"
  @get external controllingSeat: t => int32 = "controllingSeat"
  @get external crouchingSkipInteract: t => bool = "crouchingSkipInteract"
  @get external interactText: t => string = "interactText"
  @get external pullInEntities: t => bool = "pullInEntities"
  @get external riderCanInteract: t => bool = "riderCanInteract"
  @get external seatCount: t => int32 = "seatCount"
}

module EntityRidingComponent = {
  type t = _EntityRidingComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityRidingComponent") @val external componentId: string = "componentId"
  @get external entityRidingOn: t => _Entity = "entityRidingOn"
}

module EntityScaleComponent = {
  type t = _EntityScaleComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityScaleComponent") @val external componentId: string = "componentId"
  @get external value: t => float = "value"
  @set external setValue: (t, float) => unit = "value"
}

module EntitySkinIdComponent = {
  type t = _EntitySkinIdComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntitySkinIdComponent") @val external componentId: string = "componentId"
  @get external value: t => int32 = "value"
  @set external setValue: (t, int32) => unit = "value"
}

module EntitySpawnAfterEvent = {
  type t = _EntitySpawnAfterEvent
  @get external cause: t => entity_initialization_cause = "cause"
  @get external entity: t => _Entity = "entity"
  @set external setEntity: (t, _Entity) => unit = "entity"
}

module EntitySpawnAfterEventSignal = {
  type t = _EntitySpawnAfterEventSignal
  @send external subscribe: (t, (_EntitySpawnAfterEvent) => unit) => (_EntitySpawnAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_EntitySpawnAfterEvent) => unit) => unit = "unsubscribe"
}

module EntityStrengthComponent = {
  type t = _EntityStrengthComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityStrengthComponent") @val external componentId: string = "componentId"
  @get external max: t => int32 = "max"
  @get external value: t => int32 = "value"
}

module EntityTameableComponent = {
  type t = _EntityTameableComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityTameableComponent") @val external componentId: string = "componentId"
  @send external getTameItems: (t) => array<string> = "getTameItems"
  @send external tame: (t) => bool = "tame"
  @get external probability: t => float = "probability"
}

module EntityType = {
  type t = _EntityType
  @get external id: t => string = "id"
}

module EntityTypeIterator = {
  type t = _EntityTypeIterator
}

module EntityTypes = {
  type t = _EntityTypes
  @send @return(nullable) external get: (t, string) => option<_EntityType> = "get"
  @send external getAll: (t) => _EntityTypeIterator = "getAll"
}

module EntityUnderwaterMovementComponent = {
  type t = _EntityUnderwaterMovementComponent
  include EntityAttributeComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityUnderwaterMovementComponent") @val external componentId: string = "componentId"
}

module EntityVariantComponent = {
  type t = _EntityVariantComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityVariantComponent") @val external componentId: string = "componentId"
  @get external value: t => int32 = "value"
}

module EntityWantsJockeyComponent = {
  type t = _EntityWantsJockeyComponent
  include EntityComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("EntityWantsJockeyComponent") @val external componentId: string = "componentId"
}

module ExplosionAfterEventSignal = {
  type t = _ExplosionAfterEventSignal
  @send external subscribe: (t, (_ExplosionAfterEvent) => unit) => (_ExplosionAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ExplosionAfterEvent) => unit) => unit = "unsubscribe"
}

module ExplosionBeforeEvent = {
  type t = _ExplosionBeforeEvent
  include ExplosionAfterEvent.Impl({ type t = t })
  @send external setImpactedBlocks: (t, array<_Block>) => unit = "setImpactedBlocks"
  @get external cancel: t => bool = "cancel"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module ExplosionBeforeEventSignal = {
  type t = _ExplosionBeforeEventSignal
  @send external subscribe: (t, (_ExplosionBeforeEvent) => unit) => (_ExplosionBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ExplosionBeforeEvent) => unit) => unit = "unsubscribe"
}

module FeedItem = {
  type t = _FeedItem
  @send external getEffects: (t) => array<_FeedItemEffect> = "getEffects"
  @get external healAmount: t => int32 = "healAmount"
  @get external item: t => string = "item"
}

module FeedItemEffect = {
  type t = _FeedItemEffect
  @get external amplifier: t => int32 = "amplifier"
  @get external chance: t => float = "chance"
  @get external duration: t => int32 = "duration"
  @get external name: t => string = "name"
}

module FilterGroup = {
  type t = _FilterGroup
}

module FluidContainer = {
  type t = _FluidContainer
  @module("@minecraft/server") @scope("FluidContainer") @val external maxFillLevel: int32 = "maxFillLevel"
  @module("@minecraft/server") @scope("FluidContainer") @val external minFillLevel: int32 = "minFillLevel"
}

module ItemCompleteUseAfterEvent = {
  type t = _ItemCompleteUseAfterEvent
  @get external itemStack: t => _ItemStack = "itemStack"
  @get external source: t => _Player = "source"
  @get external useDuration: t => int32 = "useDuration"
}

module ItemCompleteUseAfterEventSignal = {
  type t = _ItemCompleteUseAfterEventSignal
  @send external subscribe: (t, (_ItemCompleteUseAfterEvent) => unit) => (_ItemCompleteUseAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemCompleteUseAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemCooldownComponent = {
  type t = _ItemCooldownComponent
  include ItemComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("ItemCooldownComponent") @val external componentId: string = "componentId"
  @send external startCooldown: (t, _Player) => unit = "startCooldown"
  @get external cooldownCategory: t => string = "cooldownCategory"
  @get external cooldownTicks: t => int32 = "cooldownTicks"
}

module ItemDefinitionAfterEventSignal = {
  type t = _ItemDefinitionAfterEventSignal
  @send external subscribe: (t, (_ItemDefinitionTriggeredAfterEvent) => unit) => (_ItemDefinitionTriggeredAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemDefinitionTriggeredAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemDefinitionBeforeEventSignal = {
  type t = _ItemDefinitionBeforeEventSignal
  @send external subscribe: (t, (_ItemDefinitionTriggeredBeforeEvent) => unit) => (_ItemDefinitionTriggeredBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemDefinitionTriggeredBeforeEvent) => unit) => unit = "unsubscribe"
}

module ItemDefinitionTriggeredBeforeEvent = {
  type t = _ItemDefinitionTriggeredBeforeEvent
  include ItemDefinitionTriggeredAfterEvent.Impl({ type t = t })
  @get external cancel: t => bool = "cancel"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module ItemDurabilityComponent = {
  type t = _ItemDurabilityComponent
  include ItemComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("ItemDurabilityComponent") @val external componentId: string = "componentId"
  @send external getDamageChance: (t, int32) => int32 = "getDamageChance"
  @send external getDamageRange: (t) => number_range = "getDamageRange"
  @get external damage: t => int32 = "damage"
  @get external maxDurability: t => int32 = "maxDurability"
  @set external setDamage: (t, int32) => unit = "damage"
}

module ItemEnchantsComponent = {
  type t = _ItemEnchantsComponent
  include ItemComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("ItemEnchantsComponent") @val external componentId: string = "componentId"
  @send external removeAllEnchantments: (t) => unit = "removeAllEnchantments"
  @get external enchantments: t => _EnchantmentList = "enchantments"
  @set external setEnchantments: (t, _EnchantmentList) => unit = "enchantments"
}

module ItemFoodComponent = {
  type t = _ItemFoodComponent
  include ItemComponent.Impl({ type t = t })
  @module("@minecraft/server") @scope("ItemFoodComponent") @val external componentId: string = "componentId"
  @get external canAlwaysEat: t => bool = "canAlwaysEat"
  @get external nutrition: t => int32 = "nutrition"
  @get external saturationModifier: t => float = "saturationModifier"
  @get external usingConvertsTo: t => string = "usingConvertsTo"
}

module ItemReleaseUseAfterEvent = {
  type t = _ItemReleaseUseAfterEvent
  @get external itemStack: t => _ItemStack = "itemStack"
  @get external source: t => _Player = "source"
  @get external useDuration: t => int32 = "useDuration"
}

module ItemReleaseUseAfterEventSignal = {
  type t = _ItemReleaseUseAfterEventSignal
  @send external subscribe: (t, (_ItemReleaseUseAfterEvent) => unit) => (_ItemReleaseUseAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemReleaseUseAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemStack = {
  type t = _ItemStack
  @send external clone: (t) => t = "clone"
  @send external getCanDestroy: (t) => array<string> = "getCanDestroy"
  @send external getCanPlaceOn: (t) => array<string> = "getCanPlaceOn"
  @send @return(nullable) external getComponent: (t, string) => option<_ItemComponent> = "getComponent"
  @send external getComponents: (t) => array<_ItemComponent> = "getComponents"
  @send external getLore: (t) => array<string> = "getLore"
  @send external getTags: (t) => array<string> = "getTags"
  @send external hasComponent: (t, string) => bool = "hasComponent"
  @send external hasTag: (t, string) => bool = "hasTag"
  @send external isStackableWith: (t, t) => bool = "isStackableWith"
  @send external setCanDestroy: (t, option<array<string>>) => unit = "setCanDestroy"
  @send external setCanPlaceOn: (t, option<array<string>>) => unit = "setCanPlaceOn"
  @send external setLore: (t, option<array<string>>) => unit = "setLore"
  @send external triggerEvent: (t, string) => unit = "triggerEvent"
  @get external amount: t => int32 = "amount"
  @get external isStackable: t => bool = "isStackable"
  @get external keepOnDeath: t => bool = "keepOnDeath"
  @get external lockMode: t => item_lock_mode = "lockMode"
  @get external maxAmount: t => int32 = "maxAmount"
  @get external nameTag: t => option<string> = "nameTag"
  @get external getType: t => _ItemType = "type"
  @get external typeId: t => string = "typeId"
  @set external setAmount: (t, int32) => unit = "amount"
  @set external setKeepOnDeath: (t, bool) => unit = "keepOnDeath"
  @set external setLockMode: (t, item_lock_mode) => unit = "lockMode"
  @set external setNameTag: (t, option<string>) => unit = "nameTag"
  @new external make: (@unwrap[ | #ItemType(_ItemType) | #String(string) ], int32) => t = "ItemStack"
}

module ItemStartUseAfterEvent = {
  type t = _ItemStartUseAfterEvent
  @get external itemStack: t => _ItemStack = "itemStack"
  @get external source: t => _Player = "source"
  @get external useDuration: t => int32 = "useDuration"
}

module ItemStartUseAfterEventSignal = {
  type t = _ItemStartUseAfterEventSignal
  @send external subscribe: (t, (_ItemStartUseAfterEvent) => unit) => (_ItemStartUseAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemStartUseAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemStartUseOnAfterEvent = {
  type t = _ItemStartUseOnAfterEvent
  @get external block: t => _Block = "block"
  @get external blockFace: t => direction = "blockFace"
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external source: t => _Player = "source"
}

module ItemStartUseOnAfterEventSignal = {
  type t = _ItemStartUseOnAfterEventSignal
  @send external subscribe: (t, (_ItemStartUseOnAfterEvent) => unit) => (_ItemStartUseOnAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemStartUseOnAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemStopUseAfterEvent = {
  type t = _ItemStopUseAfterEvent
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external source: t => _Player = "source"
  @get external useDuration: t => int32 = "useDuration"
}

module ItemStopUseAfterEventSignal = {
  type t = _ItemStopUseAfterEventSignal
  @send external subscribe: (t, (_ItemStopUseAfterEvent) => unit) => (_ItemStopUseAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemStopUseAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemStopUseOnAfterEvent = {
  type t = _ItemStopUseOnAfterEvent
  @get external block: t => _Block = "block"
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external source: t => _Player = "source"
}

module ItemStopUseOnAfterEventSignal = {
  type t = _ItemStopUseOnAfterEventSignal
  @send external subscribe: (t, (_ItemStopUseOnAfterEvent) => unit) => (_ItemStopUseOnAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemStopUseOnAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemType = {
  type t = _ItemType
  @get external id: t => string = "id"
}

module ItemTypes = {
  type t = _ItemTypes
  @send @return(nullable) external get: (t, string) => option<_ItemType> = "get"
  @send external getAll: (t) => array<_ItemType> = "getAll"
}

module ItemUseAfterEventSignal = {
  type t = _ItemUseAfterEventSignal
  @send external subscribe: (t, (_ItemUseAfterEvent) => unit) => (_ItemUseAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemUseAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemUseBeforeEvent = {
  type t = _ItemUseBeforeEvent
  include ItemUseAfterEvent.Impl({ type t = t })
  @get external cancel: t => bool = "cancel"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module ItemUseBeforeEventSignal = {
  type t = _ItemUseBeforeEventSignal
  @send external subscribe: (t, (_ItemUseBeforeEvent) => unit) => (_ItemUseBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemUseBeforeEvent) => unit) => unit = "unsubscribe"
}

module ItemUseOnAfterEventSignal = {
  type t = _ItemUseOnAfterEventSignal
  @send external subscribe: (t, (_ItemUseOnAfterEvent) => unit) => (_ItemUseOnAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemUseOnAfterEvent) => unit) => unit = "unsubscribe"
}

module ItemUseOnBeforeEvent = {
  type t = _ItemUseOnBeforeEvent
  include ItemUseOnAfterEvent.Impl({ type t = t })
  @get external cancel: t => bool = "cancel"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module ItemUseOnBeforeEventSignal = {
  type t = _ItemUseOnBeforeEventSignal
  @send external subscribe: (t, (_ItemUseOnBeforeEvent) => unit) => (_ItemUseOnBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ItemUseOnBeforeEvent) => unit) => unit = "unsubscribe"
}

module LeverActionAfterEvent = {
  type t = _LeverActionAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external isPowered: t => bool = "isPowered"
  @get external player: t => _Player = "player"
}

module LeverActionAfterEventSignal = {
  type t = _LeverActionAfterEventSignal
  include ILeverActionAfterEventSignal.Impl({ type t = t })
}

module MessageReceiveAfterEvent = {
  type t = _MessageReceiveAfterEvent
  @get external id: t => string = "id"
  @get external message: t => string = "message"
  @get external player: t => _Player = "player"
}

module MinecraftDimensionTypes = {
  type t = _MinecraftDimensionTypes
  @module("@minecraft/server") @scope("MinecraftDimensionTypes") @val external nether: string = "nether"
  @module("@minecraft/server") @scope("MinecraftDimensionTypes") @val external overworld: string = "overworld"
  @module("@minecraft/server") @scope("MinecraftDimensionTypes") @val external theEnd: string = "theEnd"
}

module MolangVariableMap = {
  type t = _MolangVariableMap
  @send external setColorRGB: (t, string, rgb) => unit = "setColorRGB"
  @send external setColorRGBA: (t, string, rgba) => unit = "setColorRGBA"
  @send external setFloat: (t, string, float) => unit = "setFloat"
  @send external setSpeedAndDirection: (t, string, float, vector3) => unit = "setSpeedAndDirection"
  @send external setVector3: (t, string, vector3) => unit = "setVector3"
  @new external make: () => t = "MolangVariableMap"
}

module NavigationResult = {
  type t = _NavigationResult
  @send external getPath: (t) => array<vector3> = "getPath"
  @get external isFullPath: t => bool = "isFullPath"
}

module PistonActivateAfterEvent = {
  type t = _PistonActivateAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external isExpanding: t => bool = "isExpanding"
  @get external piston: t => _BlockPistonComponent = "piston"
}

module PistonActivateAfterEventSignal = {
  type t = _PistonActivateAfterEventSignal
  @send external subscribe: (t, (_PistonActivateAfterEvent) => unit) => (_PistonActivateAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PistonActivateAfterEvent) => unit) => unit = "unsubscribe"
}

module PistonActivateBeforeEvent = {
  type t = _PistonActivateBeforeEvent
  include BlockEvent.Impl({ type t = t })
  @get external cancel: t => bool = "cancel"
  @get external isExpanding: t => bool = "isExpanding"
  @get external piston: t => _BlockPistonComponent = "piston"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module PistonActivateBeforeEventSignal = {
  type t = _PistonActivateBeforeEventSignal
  @send external subscribe: (t, (_PistonActivateBeforeEvent) => unit) => (_PistonActivateBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PistonActivateBeforeEvent) => unit) => unit = "unsubscribe"
}

module Player = {
  type t = _Player
  include Entity.Impl({ type t = t })
  @send external addExperience: (t, int32) => int32 = "addExperience"
  @send external addLevels: (t, int32) => int32 = "addLevels"
  @send external getItemCooldown: (t, string) => int32 = "getItemCooldown"
  @send @return(nullable) external getSpawnPoint: (t) => option<dimension_location> = "getSpawnPoint"
  @send external getTotalXp: (t) => int32 = "getTotalXp"
  @send external isOp: (t) => bool = "isOp"
  @send external playMusic: (t, string, option<music_options>) => unit = "playMusic"
  @send external playSound: (t, string, option<player_sound_options>) => unit = "playSound"
  @send external postClientMessage: (t, string, string) => unit = "postClientMessage"
  @send external queueMusic: (t, string, option<music_options>) => unit = "queueMusic"
  @send external resetLevel: (t) => unit = "resetLevel"
  @send external sendMessage: (t, @unwrap[ | #Array(array<@unwrap[ | #RawMessage(raw_message) | #String(string) ]>) | #RawMessage(raw_message) | #String(string) ]) => unit = "sendMessage"
  @send external setOp: (t, bool) => unit = "setOp"
  @send external setSpawnPoint: (t, option<dimension_location>) => unit = "setSpawnPoint"
  @send external startItemCooldown: (t, string, int32) => unit = "startItemCooldown"
  @send external stopMusic: (t) => unit = "stopMusic"
  @get external camera: t => _Camera = "camera"
  @get external isEmoting: t => bool = "isEmoting"
  @get external isFlying: t => bool = "isFlying"
  @get external isGliding: t => bool = "isGliding"
  @get external isJumping: t => bool = "isJumping"
  @get external level: t => int32 = "level"
  @get external name: t => string = "name"
  @get external onScreenDisplay: t => _ScreenDisplay = "onScreenDisplay"
  @get external selectedSlot: t => int32 = "selectedSlot"
  @get external totalXpNeededForNextLevel: t => int32 = "totalXpNeededForNextLevel"
  @get external xpEarnedAtCurrentLevel: t => int32 = "xpEarnedAtCurrentLevel"
  @set external setSelectedSlot: (t, int32) => unit = "selectedSlot"
}

module PlayerBreakBlockAfterEvent = {
  type t = _PlayerBreakBlockAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external brokenBlockPermutation: t => _BlockPermutation = "brokenBlockPermutation"
  @get external itemStackAfterBreak: t => option<_ItemStack> = "itemStackAfterBreak"
  @get external itemStackBeforeBreak: t => option<_ItemStack> = "itemStackBeforeBreak"
  @get external player: t => _Player = "player"
}

module PlayerBreakBlockAfterEventSignal = {
  type t = _PlayerBreakBlockAfterEventSignal
  @send external subscribe: (t, (_PlayerBreakBlockAfterEvent) => unit, option<block_event_options>) => (_PlayerBreakBlockAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerBreakBlockAfterEvent) => unit) => unit = "unsubscribe"
}

module PlayerBreakBlockBeforeEvent = {
  type t = _PlayerBreakBlockBeforeEvent
  include BlockEvent.Impl({ type t = t })
  @get external cancel: t => bool = "cancel"
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external player: t => _Player = "player"
  @set external setCancel: (t, bool) => unit = "cancel"
  @set external setItemStack: (t, option<_ItemStack>) => unit = "itemStack"
}

module PlayerBreakBlockBeforeEventSignal = {
  type t = _PlayerBreakBlockBeforeEventSignal
  @send external subscribe: (t, (_PlayerBreakBlockBeforeEvent) => unit, option<block_event_options>) => (_PlayerBreakBlockBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerBreakBlockBeforeEvent) => unit) => unit = "unsubscribe"
}

module PlayerDimensionChangeAfterEvent = {
  type t = _PlayerDimensionChangeAfterEvent
  @get external fromDimension: t => _Dimension = "fromDimension"
  @get external fromLocation: t => vector3 = "fromLocation"
  @get external player: t => _Player = "player"
  @get external toDimension: t => _Dimension = "toDimension"
  @get external toLocation: t => vector3 = "toLocation"
}

module PlayerDimensionChangeAfterEventSignal = {
  type t = _PlayerDimensionChangeAfterEventSignal
  @send external subscribe: (t, (_PlayerDimensionChangeAfterEvent) => unit) => (_PlayerDimensionChangeAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerDimensionChangeAfterEvent) => unit) => unit = "unsubscribe"
}

module PlayerInteractWithBlockAfterEvent = {
  type t = _PlayerInteractWithBlockAfterEvent
  @get external block: t => _Block = "block"
  @get external blockFace: t => direction = "blockFace"
  @get external faceLocation: t => vector3 = "faceLocation"
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external player: t => _Player = "player"
}

module PlayerInteractWithBlockAfterEventSignal = {
  type t = _PlayerInteractWithBlockAfterEventSignal
  @send external subscribe: (t, (_PlayerInteractWithBlockAfterEvent) => unit) => (_PlayerInteractWithBlockAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerInteractWithBlockAfterEvent) => unit) => unit = "unsubscribe"
}

module PlayerInteractWithBlockBeforeEvent = {
  type t = _PlayerInteractWithBlockBeforeEvent
  @get external block: t => _Block = "block"
  @get external blockFace: t => direction = "blockFace"
  @get external cancel: t => bool = "cancel"
  @get external faceLocation: t => vector3 = "faceLocation"
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external player: t => _Player = "player"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module PlayerInteractWithBlockBeforeEventSignal = {
  type t = _PlayerInteractWithBlockBeforeEventSignal
  @send external subscribe: (t, (_PlayerInteractWithBlockBeforeEvent) => unit) => (_PlayerInteractWithBlockBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerInteractWithBlockBeforeEvent) => unit) => unit = "unsubscribe"
}

module PlayerInteractWithEntityAfterEvent = {
  type t = _PlayerInteractWithEntityAfterEvent
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external player: t => _Player = "player"
  @get external target: t => _Entity = "target"
}

module PlayerInteractWithEntityAfterEventSignal = {
  type t = _PlayerInteractWithEntityAfterEventSignal
  @send external subscribe: (t, (_PlayerInteractWithEntityAfterEvent) => unit) => (_PlayerInteractWithEntityAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerInteractWithEntityAfterEvent) => unit) => unit = "unsubscribe"
}

module PlayerInteractWithEntityBeforeEvent = {
  type t = _PlayerInteractWithEntityBeforeEvent
  @get external cancel: t => bool = "cancel"
  @get external itemStack: t => option<_ItemStack> = "itemStack"
  @get external player: t => _Player = "player"
  @get external target: t => _Entity = "target"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module PlayerInteractWithEntityBeforeEventSignal = {
  type t = _PlayerInteractWithEntityBeforeEventSignal
  @send external subscribe: (t, (_PlayerInteractWithEntityBeforeEvent) => unit) => (_PlayerInteractWithEntityBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerInteractWithEntityBeforeEvent) => unit) => unit = "unsubscribe"
}

module PlayerIterator = {
  type t = _PlayerIterator
}

module PlayerJoinAfterEvent = {
  type t = _PlayerJoinAfterEvent
  @get external playerId: t => string = "playerId"
  @get external playerName: t => string = "playerName"
}

module PlayerJoinAfterEventSignal = {
  type t = _PlayerJoinAfterEventSignal
  include IPlayerJoinAfterEventSignal.Impl({ type t = t })
}

module PlayerLeaveAfterEvent = {
  type t = _PlayerLeaveAfterEvent
  @get external playerId: t => string = "playerId"
  @get external playerName: t => string = "playerName"
}

module PlayerLeaveAfterEventSignal = {
  type t = _PlayerLeaveAfterEventSignal
  include IPlayerLeaveAfterEventSignal.Impl({ type t = t })
}

module PlayerLeaveBeforeEvent = {
  type t = _PlayerLeaveBeforeEvent
  @get external player: t => _Player = "player"
}

module PlayerLeaveBeforeEventSignal = {
  type t = _PlayerLeaveBeforeEventSignal
  @send external subscribe: (t, (_PlayerLeaveBeforeEvent) => unit) => (_PlayerLeaveBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerLeaveBeforeEvent) => unit) => unit = "unsubscribe"
}

module PlayerPlaceBlockAfterEvent = {
  type t = _PlayerPlaceBlockAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external player: t => _Player = "player"
}

module PlayerPlaceBlockAfterEventSignal = {
  type t = _PlayerPlaceBlockAfterEventSignal
  @send external subscribe: (t, (_PlayerPlaceBlockAfterEvent) => unit, option<block_event_options>) => (_PlayerPlaceBlockAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerPlaceBlockAfterEvent) => unit) => unit = "unsubscribe"
}

module PlayerPlaceBlockBeforeEvent = {
  type t = _PlayerPlaceBlockBeforeEvent
  include BlockEvent.Impl({ type t = t })
  @get external cancel: t => bool = "cancel"
  @get external face: t => direction = "face"
  @get external faceLocation: t => vector3 = "faceLocation"
  @get external itemStack: t => _ItemStack = "itemStack"
  @get external player: t => _Player = "player"
  @set external setCancel: (t, bool) => unit = "cancel"
  @set external setItemStack: (t, _ItemStack) => unit = "itemStack"
}

module PlayerPlaceBlockBeforeEventSignal = {
  type t = _PlayerPlaceBlockBeforeEventSignal
  @send external subscribe: (t, (_PlayerPlaceBlockBeforeEvent) => unit, option<block_event_options>) => (_PlayerPlaceBlockBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PlayerPlaceBlockBeforeEvent) => unit) => unit = "unsubscribe"
}

module PlayerSpawnAfterEvent = {
  type t = _PlayerSpawnAfterEvent
  @get external initialSpawn: t => bool = "initialSpawn"
  @get external player: t => _Player = "player"
  @set external setInitialSpawn: (t, bool) => unit = "initialSpawn"
  @set external setPlayer: (t, _Player) => unit = "player"
}

module PlayerSpawnAfterEventSignal = {
  type t = _PlayerSpawnAfterEventSignal
  include IPlayerSpawnAfterEventSignal.Impl({ type t = t })
}

module PressurePlatePopAfterEvent = {
  type t = _PressurePlatePopAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external previousRedstonePower: t => int32 = "previousRedstonePower"
  @get external redstonePower: t => int32 = "redstonePower"
}

module PressurePlatePopAfterEventSignal = {
  type t = _PressurePlatePopAfterEventSignal
  @send external subscribe: (t, (_PressurePlatePopAfterEvent) => unit) => (_PressurePlatePopAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PressurePlatePopAfterEvent) => unit) => unit = "unsubscribe"
}

module PressurePlatePushAfterEvent = {
  type t = _PressurePlatePushAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external previousRedstonePower: t => int32 = "previousRedstonePower"
  @get external redstonePower: t => int32 = "redstonePower"
  @get external source: t => _Entity = "source"
}

module PressurePlatePushAfterEventSignal = {
  type t = _PressurePlatePushAfterEventSignal
  @send external subscribe: (t, (_PressurePlatePushAfterEvent) => unit) => (_PressurePlatePushAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_PressurePlatePushAfterEvent) => unit) => unit = "unsubscribe"
}

module ProjectileHitBlockAfterEvent = {
  type t = _ProjectileHitBlockAfterEvent
  @send external getBlockHit: (t) => block_hit_information = "getBlockHit"
  @get external dimension: t => _Dimension = "dimension"
  @get external hitVector: t => vector3 = "hitVector"
  @get external location: t => vector3 = "location"
  @get external projectile: t => _Entity = "projectile"
  @get external source: t => option<_Entity> = "source"
}

module ProjectileHitBlockAfterEventSignal = {
  type t = _ProjectileHitBlockAfterEventSignal
  @send external subscribe: (t, (_ProjectileHitBlockAfterEvent) => unit) => (_ProjectileHitBlockAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ProjectileHitBlockAfterEvent) => unit) => unit = "unsubscribe"
}

module ProjectileHitEntityAfterEvent = {
  type t = _ProjectileHitEntityAfterEvent
  @send external getEntityHit: (t) => entity_hit_information = "getEntityHit"
  @get external dimension: t => _Dimension = "dimension"
  @get external hitVector: t => vector3 = "hitVector"
  @get external location: t => vector3 = "location"
  @get external projectile: t => _Entity = "projectile"
  @get external source: t => option<_Entity> = "source"
}

module ProjectileHitEntityAfterEventSignal = {
  type t = _ProjectileHitEntityAfterEventSignal
  @send external subscribe: (t, (_ProjectileHitEntityAfterEvent) => unit) => (_ProjectileHitEntityAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ProjectileHitEntityAfterEvent) => unit) => unit = "unsubscribe"
}

module Scoreboard = {
  type t = _Scoreboard
  @send external addObjective: (t, string, string) => _ScoreboardObjective = "addObjective"
  @send @return(nullable) external clearObjectiveAtDisplaySlot: (t, display_slot_id) => option<_ScoreboardObjective> = "clearObjectiveAtDisplaySlot"
  @send @return(nullable) external getObjective: (t, string) => option<_ScoreboardObjective> = "getObjective"
  @send @return(nullable) external getObjectiveAtDisplaySlot: (t, display_slot_id) => option<scoreboard_objective_display_options> = "getObjectiveAtDisplaySlot"
  @send external getObjectives: (t) => array<_ScoreboardObjective> = "getObjectives"
  @send external getParticipants: (t) => array<_ScoreboardIdentity> = "getParticipants"
  @send external removeObjective: (t, @unwrap[ | #ScoreboardObjective(_ScoreboardObjective) | #String(string) ]) => bool = "removeObjective"
  @send @return(nullable) external setObjectiveAtDisplaySlot: (t, display_slot_id, scoreboard_objective_display_options) => option<_ScoreboardObjective> = "setObjectiveAtDisplaySlot"
}

module ScoreboardIdentity = {
  type t = _ScoreboardIdentity
  @send @return(nullable) external getEntity: (t) => option<_Entity> = "getEntity"
  @send external isValid: (t) => bool = "isValid"
  @get external displayName: t => string = "displayName"
  @get external id: t => int32 = "id"
  @get external getType: t => scoreboard_identity_type = "type"
}

module ScoreboardObjective = {
  type t = _ScoreboardObjective
  @send external addScore: (t, @unwrap[ | #Entity(_Entity) | #ScoreboardIdentity(_ScoreboardIdentity) | #String(string) ], int32) => int32 = "addScore"
  @send external getParticipants: (t) => array<_ScoreboardIdentity> = "getParticipants"
  @send @return(nullable) external getScore: (t, @unwrap[ | #Entity(_Entity) | #ScoreboardIdentity(_ScoreboardIdentity) | #String(string) ]) => option<int32> = "getScore"
  @send external getScores: (t) => array<_ScoreboardScoreInfo> = "getScores"
  @send external hasParticipant: (t, @unwrap[ | #Entity(_Entity) | #ScoreboardIdentity(_ScoreboardIdentity) | #String(string) ]) => bool = "hasParticipant"
  @send external isValid: (t) => bool = "isValid"
  @send external removeParticipant: (t, @unwrap[ | #Entity(_Entity) | #ScoreboardIdentity(_ScoreboardIdentity) | #String(string) ]) => bool = "removeParticipant"
  @send external setScore: (t, @unwrap[ | #Entity(_Entity) | #ScoreboardIdentity(_ScoreboardIdentity) | #String(string) ], int32) => unit = "setScore"
  @get external displayName: t => string = "displayName"
  @get external id: t => string = "id"
}

module ScoreboardScoreInfo = {
  type t = _ScoreboardScoreInfo
  @get external participant: t => _ScoreboardIdentity = "participant"
  @get external score: t => int32 = "score"
}

module ScreenDisplay = {
  type t = _ScreenDisplay
  @send external isValid: (t) => bool = "isValid"
  @send external setActionBar: (t, @unwrap[ | #Array(array<@unwrap[ | #RawMessage(raw_message) | #String(string) ]>) | #RawMessage(raw_message) | #String(string) ]) => unit = "setActionBar"
  @send external setTitle: (t, @unwrap[ | #Array(array<@unwrap[ | #RawMessage(raw_message) | #String(string) ]>) | #RawMessage(raw_message) | #String(string) ], option<title_display_options>) => unit = "setTitle"
  @send external updateSubtitle: (t, @unwrap[ | #Array(array<@unwrap[ | #RawMessage(raw_message) | #String(string) ]>) | #RawMessage(raw_message) | #String(string) ]) => unit = "updateSubtitle"
}

module ScriptEventCommandMessageAfterEvent = {
  type t = _ScriptEventCommandMessageAfterEvent
  @get external id: t => string = "id"
  @get external initiator: t => option<_Entity> = "initiator"
  @get external message: t => string = "message"
  @get external sourceBlock: t => option<_Block> = "sourceBlock"
  @get external sourceEntity: t => option<_Entity> = "sourceEntity"
  @get external sourceType: t => script_event_source = "sourceType"
}

module ScriptEventCommandMessageAfterEventSignal = {
  type t = _ScriptEventCommandMessageAfterEventSignal
  @send external subscribe: (t, (_ScriptEventCommandMessageAfterEvent) => unit, option<script_event_message_filter_options>) => (_ScriptEventCommandMessageAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_ScriptEventCommandMessageAfterEvent) => unit) => unit = "unsubscribe"
}

module Seat = {
  type t = _Seat
  @get external lockRiderRotation: t => float = "lockRiderRotation"
  @get external maxRiderCount: t => int32 = "maxRiderCount"
  @get external minRiderCount: t => int32 = "minRiderCount"
  @get external position: t => vector3 = "position"
}

module ServerMessageAfterEventSignal = {
  type t = _ServerMessageAfterEventSignal
  @send external subscribe: (t, (_MessageReceiveAfterEvent) => unit) => (_MessageReceiveAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_MessageReceiveAfterEvent) => unit) => unit = "unsubscribe"
}

module System = {
  type t = _System
  @send external clearRun: (t, int32) => unit = "clearRun"
  @send external run: (t, () => unit) => int32 = "run"
  @send external runInterval: (t, () => unit, option<int32>) => int32 = "runInterval"
  @send external runTimeout: (t, () => unit, option<int32>) => int32 = "runTimeout"
  @get external afterEvents: t => _SystemAfterEvents = "afterEvents"
  @get external beforeEvents: t => _SystemBeforeEvents = "beforeEvents"
  @get external currentTick: t => int32 = "currentTick"
}

module SystemAfterEvents = {
  type t = _SystemAfterEvents
  @get external scriptEventReceive: t => _ScriptEventCommandMessageAfterEventSignal = "scriptEventReceive"
}

module SystemBeforeEvents = {
  type t = _SystemBeforeEvents
  @get external watchdogTerminate: t => _WatchdogTerminateBeforeEventSignal = "watchdogTerminate"
}

module TargetBlockHitAfterEvent = {
  type t = _TargetBlockHitAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external hitVector: t => vector3 = "hitVector"
  @get external previousRedstonePower: t => int32 = "previousRedstonePower"
  @get external redstonePower: t => int32 = "redstonePower"
  @get external source: t => _Entity = "source"
}

module TargetBlockHitAfterEventSignal = {
  type t = _TargetBlockHitAfterEventSignal
  @send external subscribe: (t, (_TargetBlockHitAfterEvent) => unit) => (_TargetBlockHitAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_TargetBlockHitAfterEvent) => unit) => unit = "unsubscribe"
}

module Trigger = {
  type t = _Trigger
  @get external eventName: t => string = "eventName"
  @set external setEventName: (t, string) => unit = "eventName"
  @new external make: (string) => t = "Trigger"
}

module TripWireTripAfterEvent = {
  type t = _TripWireTripAfterEvent
  include BlockEvent.Impl({ type t = t })
  @get external isPowered: t => bool = "isPowered"
  @get external sources: t => array<_Entity> = "sources"
}

module TripWireTripAfterEventSignal = {
  type t = _TripWireTripAfterEventSignal
  @send external subscribe: (t, (_TripWireTripAfterEvent) => unit) => (_TripWireTripAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_TripWireTripAfterEvent) => unit) => unit = "unsubscribe"
}

module Vector = {
  type t = _Vector
  @module("@minecraft/server") @scope("Vector") @val external back: _Vector = "back"
  @module("@minecraft/server") @scope("Vector") @val external down: _Vector = "down"
  @module("@minecraft/server") @scope("Vector") @val external forward: _Vector = "forward"
  @module("@minecraft/server") @scope("Vector") @val external left: _Vector = "left"
  @module("@minecraft/server") @scope("Vector") @val external one: _Vector = "one"
  @module("@minecraft/server") @scope("Vector") @val external right: _Vector = "right"
  @module("@minecraft/server") @scope("Vector") @val external up: _Vector = "up"
  @module("@minecraft/server") @scope("Vector") @val external zero: _Vector = "zero"
  @send external add: (t, vector3, vector3) => t = "add"
  @send external cross: (t, vector3, vector3) => t = "cross"
  @send external distance: (t, vector3, vector3) => float = "distance"
  @send external divide: (t, vector3, @unwrap[ | #Float(float) | #Vector3(vector3) ]) => t = "divide"
  @send external equals: (t, t) => bool = "equals"
  @send external length: (t) => float = "length"
  @send external lengthSquared: (t) => float = "lengthSquared"
  @send external lerp: (t, vector3, vector3, float) => t = "lerp"
  @send external max: (t, vector3, vector3) => t = "max"
  @send external min: (t, vector3, vector3) => t = "min"
  @send external multiply: (t, vector3, @unwrap[ | #Float(float) | #Vector3(vector3) ]) => t = "multiply"
  @send external normalized: (t) => t = "normalized"
  @send external slerp: (t, vector3, vector3, float) => t = "slerp"
  @send external subtract: (t, vector3, vector3) => t = "subtract"
  @get external x: t => float = "x"
  @get external y: t => float = "y"
  @get external z: t => float = "z"
  @set external setX: (t, float) => unit = "x"
  @set external setY: (t, float) => unit = "y"
  @set external setZ: (t, float) => unit = "z"
  @new external make: (float, float, float) => t = "Vector"
}

module WatchdogTerminateBeforeEvent = {
  type t = _WatchdogTerminateBeforeEvent
  @get external cancel: t => bool = "cancel"
  @get external terminateReason: t => watchdog_terminate_reason = "terminateReason"
  @set external setCancel: (t, bool) => unit = "cancel"
}

module WatchdogTerminateBeforeEventSignal = {
  type t = _WatchdogTerminateBeforeEventSignal
  @send external subscribe: (t, (_WatchdogTerminateBeforeEvent) => unit) => (_WatchdogTerminateBeforeEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_WatchdogTerminateBeforeEvent) => unit) => unit = "unsubscribe"
}

module WeatherChangeAfterEvent = {
  type t = _WeatherChangeAfterEvent
  @get external dimension: t => string = "dimension"
  @get external lightning: t => bool = "lightning"
  @get external raining: t => bool = "raining"
}

module WeatherChangeAfterEventSignal = {
  type t = _WeatherChangeAfterEventSignal
  @send external subscribe: (t, (_WeatherChangeAfterEvent) => unit) => (_WeatherChangeAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_WeatherChangeAfterEvent) => unit) => unit = "unsubscribe"
}

module World = {
  type t = _World
  @send external broadcastClientMessage: (t, string, string) => unit = "broadcastClientMessage"
  @send external clearDynamicProperties: (t) => unit = "clearDynamicProperties"
  @send external getAbsoluteTime: (t) => int32 = "getAbsoluteTime"
  @send external getAllPlayers: (t) => array<_Player> = "getAllPlayers"
  @send external getDay: (t) => int32 = "getDay"
  @send external getDefaultSpawnLocation: (t) => vector3 = "getDefaultSpawnLocation"
  @send external getDimension: (t, string) => _Dimension = "getDimension"
  @send @return(nullable) external getDynamicProperty: (t, string) => option<@unwrap[ | #Boolean(bool) | #Double(float) | #Float(float) | #String(string) | #Vector3(vector3) ]> = "getDynamicProperty"
  @send external getDynamicPropertyIds: (t) => array<string> = "getDynamicPropertyIds"
  @send external getDynamicPropertyTotalByteCount: (t) => int32 = "getDynamicPropertyTotalByteCount"
  @send @return(nullable) external getEntity: (t, string) => option<_Entity> = "getEntity"
  @send external getMoonPhase: (t) => moon_phase = "getMoonPhase"
  @send external getPlayers: (t, option<entity_query_options>) => array<_Player> = "getPlayers"
  @send external getTimeOfDay: (t) => int32 = "getTimeOfDay"
  @send external playMusic: (t, string, option<music_options>) => unit = "playMusic"
  @send external playSound: (t, string, vector3, option<world_sound_options>) => unit = "playSound"
  @send external queueMusic: (t, string, option<music_options>) => unit = "queueMusic"
  @send external sendMessage: (t, @unwrap[ | #Array(array<@unwrap[ | #RawMessage(raw_message) | #String(string) ]>) | #RawMessage(raw_message) | #String(string) ]) => unit = "sendMessage"
  @send external setAbsoluteTime: (t, int32) => unit = "setAbsoluteTime"
  @send external setDefaultSpawnLocation: (t, vector3) => unit = "setDefaultSpawnLocation"
  @send external setDynamicProperty: (t, string, option<@unwrap[ | #Boolean(bool) | #Double(float) | #Float(float) | #String(string) | #Vector3(vector3) ]>) => unit = "setDynamicProperty"
  @send external setTimeOfDay: (t, @unwrap[ | #Int32(int32) | #TimeOfDay(time_of_day) ]) => unit = "setTimeOfDay"
  @send external stopMusic: (t) => unit = "stopMusic"
  @get external afterEvents: t => _WorldAfterEvents = "afterEvents"
  @get external beforeEvents: t => _WorldBeforeEvents = "beforeEvents"
  @get external scoreboard: t => _Scoreboard = "scoreboard"
}

module WorldAfterEvents = {
  type t = _WorldAfterEvents
  @get external blockExplode: t => _BlockExplodeAfterEventSignal = "blockExplode"
  @get external buttonPush: t => _ButtonPushAfterEventSignal = "buttonPush"
  @get external chatSend: t => _ChatSendAfterEventSignal = "chatSend"
  @get external dataDrivenEntityTriggerEvent: t => _DataDrivenEntityTriggerAfterEventSignal = "dataDrivenEntityTriggerEvent"
  @get external effectAdd: t => _EffectAddAfterEventSignal = "effectAdd"
  @get external entityDie: t => _EntityDieAfterEventSignal = "entityDie"
  @get external entityHealthChanged: t => _EntityHealthChangedAfterEventSignal = "entityHealthChanged"
  @get external entityHitBlock: t => _EntityHitBlockAfterEventSignal = "entityHitBlock"
  @get external entityHitEntity: t => _EntityHitEntityAfterEventSignal = "entityHitEntity"
  @get external entityHurt: t => _EntityHurtAfterEventSignal = "entityHurt"
  @get external entityLoad: t => _EntityLoadAfterEventSignal = "entityLoad"
  @get external entityRemove: t => _EntityRemoveAfterEventSignal = "entityRemove"
  @get external entitySpawn: t => _EntitySpawnAfterEventSignal = "entitySpawn"
  @get external explosion: t => _ExplosionAfterEventSignal = "explosion"
  @get external itemCompleteUse: t => _ItemCompleteUseAfterEventSignal = "itemCompleteUse"
  @get external itemDefinitionEvent: t => _ItemDefinitionAfterEventSignal = "itemDefinitionEvent"
  @get external itemReleaseUse: t => _ItemReleaseUseAfterEventSignal = "itemReleaseUse"
  @get external itemStartUse: t => _ItemStartUseAfterEventSignal = "itemStartUse"
  @get external itemStartUseOn: t => _ItemStartUseOnAfterEventSignal = "itemStartUseOn"
  @get external itemStopUse: t => _ItemStopUseAfterEventSignal = "itemStopUse"
  @get external itemStopUseOn: t => _ItemStopUseOnAfterEventSignal = "itemStopUseOn"
  @get external itemUse: t => _ItemUseAfterEventSignal = "itemUse"
  @get external itemUseOn: t => _ItemUseOnAfterEventSignal = "itemUseOn"
  @get external leverAction: t => _LeverActionAfterEventSignal = "leverAction"
  @get external messageReceive: t => _ServerMessageAfterEventSignal = "messageReceive"
  @get external pistonActivate: t => _PistonActivateAfterEventSignal = "pistonActivate"
  @get external playerBreakBlock: t => _PlayerBreakBlockAfterEventSignal = "playerBreakBlock"
  @get external playerDimensionChange: t => _PlayerDimensionChangeAfterEventSignal = "playerDimensionChange"
  @get external playerInteractWithBlock: t => _PlayerInteractWithBlockAfterEventSignal = "playerInteractWithBlock"
  @get external playerInteractWithEntity: t => _PlayerInteractWithEntityAfterEventSignal = "playerInteractWithEntity"
  @get external playerJoin: t => _PlayerJoinAfterEventSignal = "playerJoin"
  @get external playerLeave: t => _PlayerLeaveAfterEventSignal = "playerLeave"
  @get external playerPlaceBlock: t => _PlayerPlaceBlockAfterEventSignal = "playerPlaceBlock"
  @get external playerSpawn: t => _PlayerSpawnAfterEventSignal = "playerSpawn"
  @get external pressurePlatePop: t => _PressurePlatePopAfterEventSignal = "pressurePlatePop"
  @get external pressurePlatePush: t => _PressurePlatePushAfterEventSignal = "pressurePlatePush"
  @get external projectileHitBlock: t => _ProjectileHitBlockAfterEventSignal = "projectileHitBlock"
  @get external projectileHitEntity: t => _ProjectileHitEntityAfterEventSignal = "projectileHitEntity"
  @get external targetBlockHit: t => _TargetBlockHitAfterEventSignal = "targetBlockHit"
  @get external tripWireTrip: t => _TripWireTripAfterEventSignal = "tripWireTrip"
  @get external weatherChange: t => _WeatherChangeAfterEventSignal = "weatherChange"
  @get external worldInitialize: t => _WorldInitializeAfterEventSignal = "worldInitialize"
}

module WorldBeforeEvents = {
  type t = _WorldBeforeEvents
  @get external chatSend: t => _ChatSendBeforeEventSignal = "chatSend"
  @get external dataDrivenEntityTriggerEvent: t => _DataDrivenEntityTriggerBeforeEventSignal = "dataDrivenEntityTriggerEvent"
  @get external effectAdd: t => _EffectAddBeforeEventSignal = "effectAdd"
  @get external entityRemove: t => _EntityRemoveBeforeEventSignal = "entityRemove"
  @get external explosion: t => _ExplosionBeforeEventSignal = "explosion"
  @get external itemDefinitionEvent: t => _ItemDefinitionBeforeEventSignal = "itemDefinitionEvent"
  @get external itemUse: t => _ItemUseBeforeEventSignal = "itemUse"
  @get external itemUseOn: t => _ItemUseOnBeforeEventSignal = "itemUseOn"
  @get external pistonActivate: t => _PistonActivateBeforeEventSignal = "pistonActivate"
  @get external playerBreakBlock: t => _PlayerBreakBlockBeforeEventSignal = "playerBreakBlock"
  @get external playerInteractWithBlock: t => _PlayerInteractWithBlockBeforeEventSignal = "playerInteractWithBlock"
  @get external playerInteractWithEntity: t => _PlayerInteractWithEntityBeforeEventSignal = "playerInteractWithEntity"
  @get external playerLeave: t => _PlayerLeaveBeforeEventSignal = "playerLeave"
  @get external playerPlaceBlock: t => _PlayerPlaceBlockBeforeEventSignal = "playerPlaceBlock"
}

module WorldInitializeAfterEvent = {
  type t = _WorldInitializeAfterEvent
}

module WorldInitializeAfterEventSignal = {
  type t = _WorldInitializeAfterEventSignal
  @send external subscribe: (t, (_WorldInitializeAfterEvent) => unit) => (_WorldInitializeAfterEvent) => unit = "subscribe"
  @send external unsubscribe: (t, (_WorldInitializeAfterEvent) => unit) => unit = "unsubscribe"
}

/* Type conversion */
module BlockComponentTypeMap = {
  /* unsafe cast */
  external toBlockInventoryComponent: _BlockComponent => _BlockInventoryComponent = "%identity"
  external toBlockPistonComponent: _BlockComponent => _BlockPistonComponent = "%identity"
  external toBlockSignComponent: _BlockComponent => _BlockSignComponent = "%identity"
  external toBlockLavaContainerComponent: _BlockComponent => _BlockLavaContainerComponent = "%identity"
  external toBlockPotionContainerComponent: _BlockComponent => _BlockPotionContainerComponent = "%identity"
  external toBlockSnowContainerComponent: _BlockComponent => _BlockSnowContainerComponent = "%identity"
  external toBlockWaterContainerComponent: _BlockComponent => _BlockWaterContainerComponent = "%identity"
  external toBlockRecordPlayerComponent: _BlockComponent => _BlockRecordPlayerComponent = "%identity"
}

module EntityComponentTypeMap = {
  /* unsafe cast */
  external toEntityAddRiderComponent: _EntityComponent => _EntityAddRiderComponent = "%identity"
  external toEntityAgeableComponent: _EntityComponent => _EntityAgeableComponent = "%identity"
  external toEntityBreathableComponent: _EntityComponent => _EntityBreathableComponent = "%identity"
  external toEntityEquippableComponent: _EntityComponent => _EntityEquippableComponent = "%identity"
  external toEntityHealableComponent: _EntityComponent => _EntityHealableComponent = "%identity"
  external toEntityInventoryComponent: _EntityComponent => _EntityInventoryComponent = "%identity"
  external toEntityItemComponent: _EntityComponent => _EntityItemComponent = "%identity"
  external toEntityLeashableComponent: _EntityComponent => _EntityLeashableComponent = "%identity"
  external toEntityMountTamingComponent: _EntityComponent => _EntityMountTamingComponent = "%identity"
  external toEntityNpcComponent: _EntityComponent => _EntityNpcComponent = "%identity"
  external toEntityOnFireComponent: _EntityComponent => _EntityOnFireComponent = "%identity"
  external toEntityRideableComponent: _EntityComponent => _EntityRideableComponent = "%identity"
  external toEntityRidingComponent: _EntityComponent => _EntityRidingComponent = "%identity"
  external toEntityStrengthComponent: _EntityComponent => _EntityStrengthComponent = "%identity"
  external toEntityTameableComponent: _EntityComponent => _EntityTameableComponent = "%identity"
  external toEntityCanClimbComponent: _EntityComponent => _EntityCanClimbComponent = "%identity"
  external toEntityCanFlyComponent: _EntityComponent => _EntityCanFlyComponent = "%identity"
  external toEntityCanPowerJumpComponent: _EntityComponent => _EntityCanPowerJumpComponent = "%identity"
  external toEntityFireImmuneComponent: _EntityComponent => _EntityFireImmuneComponent = "%identity"
  external toEntityFloatsInLiquidComponent: _EntityComponent => _EntityFloatsInLiquidComponent = "%identity"
  external toEntityIsBabyComponent: _EntityComponent => _EntityIsBabyComponent = "%identity"
  external toEntityIsChargedComponent: _EntityComponent => _EntityIsChargedComponent = "%identity"
  external toEntityIsChestedComponent: _EntityComponent => _EntityIsChestedComponent = "%identity"
  external toEntityIsDyeableComponent: _EntityComponent => _EntityIsDyeableComponent = "%identity"
  external toEntityIsHiddenWhenInvisibleComponent: _EntityComponent => _EntityIsHiddenWhenInvisibleComponent = "%identity"
  external toEntityIsIgnitedComponent: _EntityComponent => _EntityIsIgnitedComponent = "%identity"
  external toEntityIsIllagerCaptainComponent: _EntityComponent => _EntityIsIllagerCaptainComponent = "%identity"
  external toEntityIsSaddledComponent: _EntityComponent => _EntityIsSaddledComponent = "%identity"
  external toEntityIsShakingComponent: _EntityComponent => _EntityIsShakingComponent = "%identity"
  external toEntityIsShearedComponent: _EntityComponent => _EntityIsShearedComponent = "%identity"
  external toEntityIsStackableComponent: _EntityComponent => _EntityIsStackableComponent = "%identity"
  external toEntityIsStunnedComponent: _EntityComponent => _EntityIsStunnedComponent = "%identity"
  external toEntityIsTamedComponent: _EntityComponent => _EntityIsTamedComponent = "%identity"
  external toEntityWantsJockeyComponent: _EntityComponent => _EntityWantsJockeyComponent = "%identity"
  external toEntityColorComponent: _EntityComponent => _EntityColorComponent = "%identity"
  external toEntityFlyingSpeedComponent: _EntityComponent => _EntityFlyingSpeedComponent = "%identity"
  external toEntityFrictionModifierComponent: _EntityComponent => _EntityFrictionModifierComponent = "%identity"
  external toEntityGroundOffsetComponent: _EntityComponent => _EntityGroundOffsetComponent = "%identity"
  external toEntityMarkVariantComponent: _EntityComponent => _EntityMarkVariantComponent = "%identity"
  external toEntityPushThroughComponent: _EntityComponent => _EntityPushThroughComponent = "%identity"
  external toEntityScaleComponent: _EntityComponent => _EntityScaleComponent = "%identity"
  external toEntitySkinIdComponent: _EntityComponent => _EntitySkinIdComponent = "%identity"
  external toEntityVariantComponent: _EntityComponent => _EntityVariantComponent = "%identity"
  external toEntityHealthComponent: _EntityComponent => _EntityHealthComponent = "%identity"
  external toEntityLavaMovementComponent: _EntityComponent => _EntityLavaMovementComponent = "%identity"
  external toEntityMovementAmphibiousComponent: _EntityComponent => _EntityMovementAmphibiousComponent = "%identity"
  external toEntityMovementBasicComponent: _EntityComponent => _EntityMovementBasicComponent = "%identity"
  external toEntityMovementComponent: _EntityComponent => _EntityMovementComponent = "%identity"
  external toEntityMovementFlyComponent: _EntityComponent => _EntityMovementFlyComponent = "%identity"
  external toEntityMovementGenericComponent: _EntityComponent => _EntityMovementGenericComponent = "%identity"
  external toEntityMovementGlideComponent: _EntityComponent => _EntityMovementGlideComponent = "%identity"
  external toEntityMovementHoverComponent: _EntityComponent => _EntityMovementHoverComponent = "%identity"
  external toEntityMovementJumpComponent: _EntityComponent => _EntityMovementJumpComponent = "%identity"
  external toEntityMovementSkipComponent: _EntityComponent => _EntityMovementSkipComponent = "%identity"
  external toEntityMovementSwayComponent: _EntityComponent => _EntityMovementSwayComponent = "%identity"
  external toEntityNavigationClimbComponent: _EntityComponent => _EntityNavigationClimbComponent = "%identity"
  external toEntityNavigationFloatComponent: _EntityComponent => _EntityNavigationFloatComponent = "%identity"
  external toEntityNavigationFlyComponent: _EntityComponent => _EntityNavigationFlyComponent = "%identity"
  external toEntityNavigationGenericComponent: _EntityComponent => _EntityNavigationGenericComponent = "%identity"
  external toEntityNavigationHoverComponent: _EntityComponent => _EntityNavigationHoverComponent = "%identity"
  external toEntityNavigationWalkComponent: _EntityComponent => _EntityNavigationWalkComponent = "%identity"
  external toEntityUnderwaterMovementComponent: _EntityComponent => _EntityUnderwaterMovementComponent = "%identity"
}

module ItemComponentTypeMap = {
  /* unsafe cast */
  external toItemFoodComponent: _ItemComponent => _ItemFoodComponent = "%identity"
  external toItemEnchantsComponent: _ItemComponent => _ItemEnchantsComponent = "%identity"
  external toItemDurabilityComponent: _ItemComponent => _ItemDurabilityComponent = "%identity"
  external toItemCooldownComponent: _ItemComponent => _ItemCooldownComponent = "%identity"
}

/* Constants */
@val @module("@minecraft/server") external moon_phase_count: int32 = "MoonPhaseCount"
@val @module("@minecraft/server") external ticks_per_day: int32 = "TicksPerDay"
@val @module("@minecraft/server") external ticks_per_second: int32 = "TicksPerSecond"
@val @module("@minecraft/server") external system: _System = "system"
@val @module("@minecraft/server") external world: _World = "world"